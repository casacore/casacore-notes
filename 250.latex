\documentclass{article}

\textwidth=16cm
\textheight=23cm
\oddsidemargin=0mm
\evensidemargin=0mm
\parindent=5mm
\parskip=2mm
\headsep=10mm
\headheight=4mm
\topmargin=-10mm
\raggedbottom
\pagestyle{headings}

\begin{document}

\title{Note 250: {\em livedata\/} - software notes}
\author{Mark Calabretta, ATNF}
\date{2002/06/14}
\maketitle


\section{Overview}
\label{sec:overview}

{\em livedata\/} is the realtime data-processing pipeline used by the
Multibeam system at Parkes.  It is also used for the 4-beam system at
Jodrell Bank, and is intended to be used for the single beam system at Mopra.

A coordinator at the heart of {\em livedata\/} directs and regulates the flow
of data between the following six independent data reduction clients:
\begin{center}
\begin{tabular}{llll}
   Reader & $\rightarrow$ \\
          & $\rightarrow$ Bandpass calibrator
            & $\rightarrow$ \\
          & & $\rightarrow$ Data monitor \\
          & & $\rightarrow$ Statistics \\
          & & $\rightarrow$ Writer
              & $\rightarrow$ Gridder
\end{tabular}
\end{center}
Data flow is from left to right, and all data reduction clients other than the
reader may be disabled or short-circuited, i.e. any line(s) of the above may
be deleted other than the first.  The gridder is dependent on the writer since
it processes the output file; it is fed via a special purpose queue and once
started may remain active even after the writer has been disabled.

\begin{description}
\item[Reader:] reads data from an {\tt MBFITS} format file (the single-dish
   variant of {\tt RPFITS}), an {\tt SDFITS} file, or an {\tt aips++}
   measurementset ({\tt MS2}).  The input data, which may be selected on a
   beam-by-beam basis, is packaged up and passed to the next client in the
   chain.

\item[Bandpass calibrator:] does most of the work in calibrating Multibeam
   data.  It has several modes of operation which it selects automatically
   based on the method of observation:

     \begin{enumerate}
     \item[a)] Scanning modes as used in {\tt HIPASS} and {\tt ZOA}\@.

     \item[b)] Frequency switching modes.

     \item[c)] Position switching modes where each element of the Multibeam
        system is pointed at the source in turn.

     \item[d)] Extended source modes such as used for High Velocity Clouds.
     \end{enumerate}

   Each of these modes uses a separate bandpass calibration strategy.
   These are based on robust statistical estimators, particularly median
   estimators, that allow rejection of RFI without human intervention.

\item[Data monitor:] interfaces to {\em MultibeamView}, a specially modified
   version of the {\em kview\/} karma application.  In fact, it invokes
   {\em MultibeamView\/} twice, once for each polarization, to provide two
   panels displaying frequency versus time with various image enhancement
   options.  This provides visual inspection for each pair of polarizations of
   the 13 beams, one pair at a time.

\item[Statistics:] Computes and displays basic statistical measures for the
   spectra from each beam and polarization as a function of time as an
   observation progresses, and computes global statistics once the observation
   has finished.  Typically it would be used to monitor $T_\mathrm{sys}$ for
   each IF\@.

\item[Writer:] data may be written either in {\tt SDFITS} format or as an
   {\tt aips++} measurementset by the writer client.

\item[Gridder:] Each Multibeam integration consists of a spectrum taken at a
   particular point on the sky.  The gridder takes the spectra from a
   collection of bandpass-calibrated observations and interpolates them onto a
   regular map grid, writing the result to a {\tt FITS} data cube as it goes.
   Typically each point in the sky is sampled many times in separate
   observations and the gridder combines these using a choice of statistics,
   including robust (median) statistics that suppress radio-frequency
   interference (RFI).

   Being the most computationally intensive client, the gridder is usually
   used separately for offline data reduction.  However, it can be linked
   into the {\em livedata\/} reduction chain, though, unlike the other
   clients, it may run remotely on another machine in a quasi-batch mode.

   The gridder is only loosely coupled to the {\em livedata\/} pipeline.  In
   fact, it is most often used in stand-alone mode since it is usually
   necessary to combine the output of many observations to produce the final
   data cube.
\end{description}

{\em livedata\/} operates in near-realtime at the Parkes telescope to allow
immediate assessment of data quality.  However, it may also be used for
offline data processing.


\section{Implementation}

In the following, the term {\em agent\/} refers to a Glish ``agent''
implemented as a Glish subsequence; these are defined via a Glish script (in a
{\tt .g} file).  These processing entities exist within Glish, they do not
have a separate unix {\tt pid} (process identification number).

The term {\em client\/} refers to a {\tt C++} program (in a {\tt .cc} file)
written using the Glish interface classes and invoked via Glish's
{\tt client()} function by the Glish agent.  These clients are separate
autonomous unix processes with their own {\tt pid}.

Each of the six {\em data reduction clients\/} described above is implemented
as a {\tt C++} client with a separate controlling Glish agent.  They are
referred to simply as {\em clients\/} where there is no ambiguity or need to
distinguish.

\subsection{Agents}

Glish agents in {\em livedata\/} have the following main functions:

\begin{description}
   \item[Control:] they are primarily responsible for invoking and controlling
      the {\tt C++} clients.

   \item[Validation:] they validate all parameter values and enforce certain
      restrictions on them in particular processing modes; the {\tt C++}
      clients themselves do minimal parameter checking.

   \item[GUI:] parameter values may be set in a number of ways as described
      below.  One method is via an optional graphical user interface provided
      by the Glish agent using {\tt glish/tk}.  The statistics client also
      provides a graphical display window using the {\tt glish/PGPLOT}
      interface.
\end{description}

\noindent
Being a loosely typed language, Glish is capable of some very powerful
constructs but at the same time allows great scope for disastrous programming
errors.  A highly formalized style of Glish programming helps to alleviate
this in {\em livedata\/}:

\begin{itemize}
   \item The agents are implemented as Glish subsequences.  A subsequence is
      essentially a Glish function which returns an agent variable created via
      Glish's {\tt create\_agent()} function; this variable may be referred to
      within the subsequence itself by the name {\em self}.

      Locally scoped data and function definitions within a subsequence
      provide a natural form of encapsulation, and the agent variable returned
      from a subsequence invokation may be treated much like an object
      instantiation.  Communication with these objects is via Glish events
      tagged to this agent variable.  Since agent variables are implemented as
      Glish records it is also possible to store public information in them in
      separate fields.

   \item Each agent contains a Glish record called {\tt parms} which contains
      operating parameters.  These are often data processing options intended
      for the {\tt C++} client and usually correspond to GUI widgets.

      Parameter values are {\em always\/} set by a function called
      {\tt setparm()} whose single argument is a record variable.  Each field
      name in this record identifies the parameter and the field value is the
      new parameter setting.

      {\tt setparm()} first validates the parameter value using a global
      function called {\tt validate()}.  Validation rules are defined in a
      record variable conventionally called {\tt valid} which is passed to
      this function.

      {\tt setparm()} implements a simple form of polymorphism via a set of
      functions contained within the {\tt set} record variable, the fields of
      which match parameter names.  When called upon to set a parameter value,
      {\tt setparm()} first checks to see if {\tt set} contains a specialized
      function and if so invokes it.  These functions are {\em never\/}
      invoked by anything other than {\tt setparm()}.

      Each agent recognizes a record-valued {\tt setparm} event which invokes
      the {\tt setparm()} function on the record.  Likewise, the {\tt init}
      event also accepts a record argument to set parameters before it
      initiates processing.  They also recognize {\tt printparms} which simply
      prints the value of the {\tt parms} record.

      Parameter values may be set by any of the following methods

      \begin{enumerate}
         \item Via the subsequence arguments.
         \item Via the {\tt setparm} event.
         \item Via the {\tt init} event.
         \item Via the graphical user interface.
      \end{enumerate}

      \noindent
      Each of these methods invokes {\tt setparm()} to change the parameter
      value.

   \item An important part of the design of the Glish agents is that the GUI
      they provide is optional, and is only one of several methods of setting
      parameter values.

      Furthermore, although the GUIs for the data reduction clients are
      normally collected together into a single {\em livedata\/} GUI, each is
      completely autonomous.  This design simplifies the development and
      debugging of a complex GUI\@.

      The GUI is always constructed by a function called {\tt showgui()} which
      takes the parent frame as an optional argument; this mechanism allows
      the separate GUIs to be combined as separate panels within in a single
      window.  If the parent frame is not provided a new top-level frame
      (i.e.\ window) is created.  Agent variables for the GUI widgets are
      always contained in a record called {\tt gui}.

      Whenever {\tt setparm()} changes a parameter value it invokes
      {\tt showparm()} which reflects the changed value in the GUI (if it is
      active).  {\tt showparm()} is a global function with two arguments; the
      first is {\tt gui}, and the second is a record of parameter values,
      each field, {\tt item}, of which identifies a widget as

      \begin{description}
         \item[{\tt gui[item].bn}]  $\ldots$ button
         \item[{\tt gui[item].en}]  $\ldots$ entry box
         \item[{\tt gui[item].sv}]  $\ldots$ label (status value)
         \item[{\tt gui[item].lb}]  $\ldots$ listbox
      \end{description}

      \noindent
      If {\tt gui[item].show} is defined it is taken to be a specialized
      function for displaying the parameter.  Otherwise {\tt showparm()} does
      a generic widget update.

      Aside from the widget updates performed by {\tt setparm()}, widget
      initialization is the {\em only\/} other valid place where 
      {\tt showparm()} may be invoked; this is almost invariably done by
      {\tt showgui()} via {\tt showparm(gui,parms)}.  

   \item The following global functions are used by most {\em livedata\/}
      agents:

      \begin{description}
         \item[{\tt showparm(gui,parms)}] -- Updates widget(s) associated with
            parameter values if the GUI is active.

         \item[{\tt validate(valid,parms,value)}] -- Parameter validity
            checking.
      \end{description}

   \item The following local functions are common to most {\em livedata\/}
      agents:

      \begin{description}
          \item[{\tt helpmsg(msg='')}] -- Write a widget help message.

          \item[{\tt sethelp(ref widget, msg='')}] -- Set up the help message
             for a widget.

          \item[{\tt setparm(value), set(value)}] -- Update parameter values,
             also updating any associated widget(s) using {\tt showparm()} if
             the GUI is active.

          \item[{\tt showgui(parent=F)}] -- Build a graphical user interface
             for the client.

          \item[{\tt readgui()}] -- Read values from GUI entry boxes.
      \end{description}

   \item The following received events are common to most {\em livedata\/}
      agents:

      \begin{description}
         \item[{\tt setparm(record)}] -- Set parameter values.

         \item[{\tt setconfig(string)}] -- Set configuration (a particular set
            of parameter values).

         \item[{\tt printparms()}] -- Print parameters values.

         \item[{\tt lock()}] -- Disable parameter entry.

         \item[{\tt unlock()}] -- Enable parameter entry.

         \item[{\tt init(record)}] -- Initialize the client; parameter values
            may optionally be specified.  The client will respond with an
            {\tt initialized()} event (see below).

         \item[{\tt showgui(agent)}] -- Create the GUI or make it visible if
            it already exists.  The parent frame may be specified.

         \item[{\tt hidegui()}] -- Make the GUI invisible.

         \item[{\tt terminate()}] -- Close down.
      \end{description}

   \item The following sent events are common to most {\em livedata\/} agents:

      \begin{description}
         \item[{\tt done()}] -- Agent has terminated.

         \item[{\tt log(record)}] -- Log a message.

         \item[{\tt initialized(record)}] -- Sent in response to an {\tt init}
            event once the client has been initialized. 

         \item[{\tt fail()}] -- Client has terminated unexpectedly.
      \end{description}
\end{itemize}

\noindent
The following annotated example illustrates these concepts:

\begin{verbatim}
   grus% glish -l pksbandpass.g
   Glish version 2.7. 
   - bandpass := pksbandpass(smoothing='Hanning', prescale_mode='median')
   - print bandpass
   [*agent*=<agent>, name=pksbandpass]
   - 
\end{verbatim}

\noindent
{\tt bandpass} is the agent variable for this instantiation of the bandpass
calibration data reduction client.  The agent name, {\tt pksbandpass}, was
included in the agent record by the subsequence and this illustrates the
mechanism for transferring public information out of the subsequence.  Note
that the values of the {\tt smoothing} and {\tt prescale\_mode} parameters
were set in the subsequence invokation.

\begin{verbatim}
   - bandpass->printparms()
   - [config=general, client_dir=, smoothing=Hanning, prescale_mode=median,
      fit_order=0, velocity_frame=BARY, rescale_axis=T, src_size=compact,
      estimator=median, bp_recalc=4, nprecycles=24, npostcycles=24,
      boxsize=20, nboxes=5, maxcycles=250, fast=T, check_field=T,
      check_time=T, tmin=0, tmax=300, tjump=20, check_position=T,
      dmin=15, dmax=300, djump=10]
   - 
\end{verbatim}

\noindent
This illustrates the general method of communicating with a Glish agent, in
this case, the {\tt printparms} event instructs it to print the value of the
{\tt parms} variable containing parameter values.

\begin{verbatim}
   - bandpass->showgui()                          
   - bandpass->setparm([smoothing='Tukey'])
   - 
\end{verbatim}

\noindent
Instructs the agent to construct a GUI and then resets the {\tt smoothing}
parameter to {\tt 'Tukey'}; the new value is reflected in the GUI\@.
Alternatively, the GUI itself could have been used to reset the value and then
{\tt printparms} would reflect the changed value.

\begin{verbatim}
   - bandpass->setparm([smoothing='Nonsense'])
   - Invalid parameter assignment:
      ignored [smoothing = Nonsense] (string type)
      remains [smoothing = Tukey] (string type)
\end{verbatim}

\noindent
An attempt to set {\tt smoothing} to an invalid value results in a warning
from {\tt validate()} that the assignment was ignored.

\subsubsection{Coordinating agents}

The data reduction clients are coordinated by a Glish agent, the
{\em reducer}, that directs and regulates the flow of data between them by
means of Glish events.  Data is transferred in the form of a Glish record via
the event value.  When the clients run on the same host, as is usual, the data
transfer is virtual, it occurs by exchanging a pointer to a section of memory,
and does not involve real I/O\@.

The basic unit of work for each data reduction client consists of processing
one integration (typically 1024 spectral channels, 13 beams, 2 polarizations,
and of 5\,s duration).  The operation of the {\em reducer\/} is completely
asynchronous, once a client's output has been accepted by the next client(s)
in the pipeline the {\em reducer\/} instructs it to process the next
integration.  The clients therefore run in parallel keeping the CPU fully
occupied.  In addition, the {\em reducer\/} manages the data reduction pathway
as clients are enabled or disabled, and also maintains the input queue for the
gridder.  It is certainly the most complex piece of Glish programming in the
{\em livedata\/} suite.

By default, when instantiated, the {\em reducer\/} instantiates a reader
client but none of the others; these must be enabled specifically.  The
{\em reducer\/} includes the agent variables for these clients in its own
agent variable thus allowing direct communication with them.  For example

\begin{verbatim}
   grus% glish -l livedatareducer.g
   Glish version 2.7. 
   - ldr := reducer(bandpass=T, stats=T)
   - print ldr
   [*agent*=<agent>, name=reducer, busy=F,
    reader=[*agent*=<agent>, name=pksreader, open=F, busy=F, message=IDLE],
    bandpass=[*agent*=<agent>, name=pksbandpass, busy=F, buffering=F,
            message=IDLE],
    monitor=[busy=F, message=inactive],
    stats=[*agent*=<agent>, name=pksstats, busy=F, message=IDLE],
    writer=[busy=F, message=inactive],
    gridder=[busy=F, message=inactive]]
   -
\end{verbatim}

\noindent
The output (which has been reformatted for clarity) shows that the reader,
bandpass, and stats clients are active but idle, while the other clients are
inactive.  Now it would be possible to communicate with the bandpass client,
say, via

\begin{verbatim}
   - ldr.bandpass->setconfig('HVC')      
   - ldr.bandpass->printparms()          
   - [config=HVC, client_dir=, smoothing=Hanning, prescale_mode=none,
      fit_order=6, velocity_frame=LSRK, rescale_axis=F, src_size=extended,
      estimator=medmed, bp_recalc=4, nprecycles=24, npostcycles=24,
      boxsize=20, nboxes=5, maxcycles=250, fast=T, check_field=F,
      check_time=F, tmin=0, tmax=300, tjump=20, check_position=F, dmin=15,
      dmax=300, djump=10]
\end{verbatim}

\noindent
This feature may be used in batch scripts to set parameter values for each
client.

An additional {\em scheduler\/} agent is added for interactive use.  It
provides a queueing mechanism that supplies input to the data reduction
pipeline.  It provides {\em livedata}'s near-realtime capability by
automatically discovering {\tt MBFITS} files as they are written by the
Multibeam correlator.  The {\em scheduler\/} includes the {\em reducer}'s
agent variable as part of its own.

{\em livedata\/} may be run in batch mode by invoking the {\em reducer\/}
directly (usually from a Glish script) thus bypassing the {\em scheduler}.

\subsection{{\Large\tt C++} clients}

The {\tt C++} clients perform the bulk of the computationally intensive parts
of the data reduction.  The reader and writer also utilize special-purpose
object libraries such as {\tt cfitsio} and {\tt RPFITS} which are not directly
accessible from Glish.

The source code for the {\tt C++} clients has a less formal structure than the
Glish agents.  However, they do have a number of common features:

\begin{enumerate}
   \item[a)] Global function pksmbSetup() performs generic Glish setup
      operations.

   \item[b)] The {\tt C++} clients are initialized via an {\tt init} event
      which contains operating parameters in a Glish record.  These are
      extracted from the event's value via the global getParm() overloaded
      functions.

   \item[c)] Message logging is done via the global logMessage(),
      logWarning(), and logError() functions.

   \item[d)] The reader, writer, and gridder clients use a common set of
      general-purpose IO classes, the object diagram for which is shown in
      Fig.~\ref{fig:PKSIO}.
\end{enumerate}

\noindent
Prototypes for the general-purpose global functions are declared in
{\tt pksmb\_support.h} which resides in the {\tt atnf/implement/pks} module,
and the IO classes are defined in various files in {\tt atnf/implement/PKSIO}
module.

\begin{figure}
   \centering
   \begin{picture}(450,150)
      \thicklines
      \put(100,150){\framebox(80,15){{\tt PKSreader}}}
      \put(140,135){\line(0,1){15}}
      \put(130,125){\line(1,1){10}}
      \put(150,125){\line(-1,1){10}}
      \put( 90,125){\line(1,0){100}}
      \put( 90,115){\line(0,1){10}}
      \put(190,115){\line(0,1){10}}
      \put( 50,100){\framebox(80,15){{\tt PKSFITSreader}}}
      \put(150,100){\framebox(80,15){{\tt PKSMS2reader}}}
      \put( 90, 65){\line(0,1){35}}
      \multiput(40,82)(5,0){10}{\circle*{.3}}
      \multiput(95,82)(5,0){10}{\circle*{.3}}
      \put( 50, 50){\framebox(80,15){{\tt FITSreader}}}
      \put(130, 57){\line(1,0){30}}
      \put(160, 50){\framebox(80,15){{\tt PKSMBrecord}}}
      \put( 90, 35){\line(0,1){15}}
      \put( 80, 25){\line(1,1){10}}
      \put(100, 25){\line(-1,1){10}}
      \put( 40, 25){\line(1,0){101}}
      \put( 40, 15){\line(0,1){10}}
      \put(140, 15){\line(0,1){10}}
      \put(  0,  0){\framebox(80,15){{\tt MBFITSreader}}}
      \put(100,  0){\framebox(80,15){{\tt SDFITSreader}}}

      \put(320,150){\framebox(80,15){{\tt PKSwriter}}}
      \put(360,135){\line(0,1){15}}
      \put(350,125){\line(1,1){10}}
      \put(370,125){\line(-1,1){10}}
      \put(310,125){\line(1,0){100}}
      \put(310,115){\line(0,1){10}}
      \put(410,115){\line(0,1){10}}
      \put(270,100){\framebox(80,15){{\tt PKSSDwriter}}}
      \put(370,100){\framebox(80,15){{\tt PKSMS2writer}}}
      \put(310, 65){\line(0,1){35}}
      \multiput(260,82)(5,0){10}{\circle*{.3}}
      \multiput(315,82)(5,0){10}{\circle*{.3}}
      \put(270, 50){\framebox(80,15){{\tt SDFITSwriter}}}
      \put(270, 57){\line(-1,0){30}}
   \end{picture}
   \caption{Class hierarchy of the {\tt PKSIO} reading and writing classes.
            Classes below the level of the dotted line are independent of
            {\tt aips++}; a stand-alone utility, {\tt rp2sdfits}, uses
            {\tt MBFITSreader} and {\tt SDFITSwriter} to translate
            {\tt MBFITS} data files to {\tt SDFITS} format.  {\tt PKSMBrecord}
            is basically a data structure that stores an {\tt MBFITS}
            single-dish data record.}
   \label{fig:PKSIO}
\end{figure}

\subsection{Files}

{\em livedata}'s main component files are as follows:

\begin{description}
   \item[{\tt livedata}]
      Bourne shell script that initiates {\em livedata}.  It checks that
      certain essential environment variables are correctly defined and starts
      Glish with {\tt livedata.g} as input.

   \item[{\tt livedata.g}]
      Startup Glish script for {\em livedata}.  It copies certain environment
      variables into Glish global variables and then creates a
      {\em scheduler\/} agent with GUI\@.

   \item[{\tt livedatascheduler.g}]
      Defines the {\em scheduler\/} agent (subsequence) with optional GUI for
      realtime (live) and offline data reduction.  Realtime reduction differs
      from offline reduction in that newly created files may be discovered
      automatically (auto-queued) and that several attempts are made to read
      files which may be incomplete.  The {\em scheduler}'s main job is to
      create a {\em reducer\/} agent and supply it with work.

   \item[{\tt livedatareducer.g}]
      Defines the {\em reducer\/} agent (subsequence) with optional GUI\@.
      This agent is {\em livedata}'s pipeline controller, it provides the glue
      that ties {\em livedata}'s data reduction clients together and regulates
      their activities.

   \item[{\tt pksreader.g}]
      Defines the {\em pksreader\/} agent (subsequence) with optional GUI\@.

   \item[{\tt pksreader.cc}]
      The {\em pksreader\/} client reads a Parkes Multibeam dataset and emits
      Multibeam Glish records.  It will determine for itself whether the input
      is an {\tt MBFITS} or {\tt SDFIT}S format file or an {\tt aips++}
      measurementset (v2).

   \item[{\tt pksbandpass.g}]
      Defines the {\em pksbandpass\/} agent (subsequence) with optional GUI\@.

   \item[{\tt pksbandpass.cc}]
      The {\em pksbandpass\/} client applies bandpass calibration to Multibeam
      data.  It has several modes of operation as described in
      Sect.~\ref{sec:overview}.

   \item[{\tt pksmonitor.g}]
      Defines the {\em pksmonitor\/} agent (subsequence) with optional GUI\@.
      This agent also creates and manages two instances of
      {\em MultibeamView}, a version of the karma {\em kview\/} utility
      adapted for {\em livedata}, one for each polarization.

   \item[{\tt pksmonitor.cc}]
      The {\em pksmonitor\/} client prepares Multibeam data for display.  It
      applies data selection, time averaging, and frequency smoothing options.

   \item[{\tt pksstats.g}]
      Defines the {\em pksstats\/} agent (subsequence) with optional graphical
      ({\tt PGPLOT}) display window.

   \item[{\tt pksstats.cc}]
      The {\em pksstats\/} client accumulates data and computes running
      statistics of the spectra for each beam and polarization, for example,
      the mean, median, and $T_\mathrm{sys}$.  It passes these back to the
      {\em pksstats\/} agent for display.  Finally it computes statistics for
      the observation as a whole from accumulated data.

   \item[{\tt pkswriter.g}]
      Defines the {\em pkswriter\/} agent (subsequence).  This agent has no
      GUI of its own, the few parameters it requires are set in the
      {\em scheduler\/} GUI\@.

   \item[{\tt pkswriter.cc}]
      The {\em pkswriter\/} client writes data to file in either {\tt SDFITS}
      or {\tt MS2} format using the {\tt PKSIO} writer classes.

   \item[{\tt gridzilla.g}]
      Defines the {\em gridzilla\/} agent (subsequence) with optional GUI\@.
      The gridder is most often used independently of {\em livedata\/} and a
      separate Bourne shell script, {\tt gridzilla}, and startup Glish script,
      {\tt gridzillarc.g}, are provided for this purpose.

   \item[{\tt pksgridzilla.cc}]
      The {\em pksgridzilla\/} client grids Multibeam data into a spectral
      data cube.  Most of the gridding is actually done by the {\tt MBGridder}
      class.

   \item[{\tt pkslib.g}]
      Defines global functions used by {\em livedata}.
\end{description}

\noindent
Generally the {\tt C++} client code resides in specific subdirectories of
{\tt atnf/apps} together with other files which define helper classes or
template definitions.

The Glish scripts reside in {\tt atnf/apps/livedata} as it is more convenient
to have them in one place for debugging -- Glish's search path finds modified
files in the current directory before looking elsewhere.  One exception is 
the gridder code which all resides in {\tt atnf/apps/pksgridzilla}.

\section{Batch processing example}

The following Glish script uses {\em livedata\/} and {\em gridzilla\/} in
batch mode to bandpass calibrate and grid a number of data files.  It does
create a GUI for each in order to display the processing parameters but this
is not necessary for its operation.

\begin{verbatim}
include 'livedatareducer.g'
include 'gridzilla.g'

# Check that DISPLAY is defined.
if (!has_field(environ, 'DISPLAY')) {
  print 'DISPLAY is not defined - abort!'
  exit
}

# Check that AIPSPATH is defined.
if (!has_field(environ, 'AIPSPATH')) {
  print 'AIPSPATH is not defined - abort!'
  exit
}

# AIPS++ system area.
aipsarch := paste(split(environ.AIPSPATH)[1],
                  split(environ.AIPSPATH)[2], sep='/')


# Input directory.
if (has_field(environ, 'HVCDIR')) {
  read_dir := environ.HVCDIR
} else {
  read_dir := '/DATA/MULTI_5/mputman/hvcred'
  read_dir := '.'
}

# Output directory.
write_dir := spaste(read_dir, '/new')
if (!len(stat(write_dir))) shell('mkdir', write_dir)


# Instantiate a livedata reducer.
ldred := reducer(icon_dir   = spaste(aipsarch, '/libexec/icons'),
                 bandpass   = T,
                 monitor    = F,
                 writer     = T,
                 stats      = T,
                 read_dir   = read_dir,
                 write_dir  = write_dir)

# Create a GUI so we can see what's going on.
ldred->showgui()
t := client("timer -oneshot", 3.0)
await t->ready


# Configure the bandpass client.
ldred.bandpass->setconfig('HVC')


# Process a batch of files through livedata.
files := shell('cd', read_dir, '&& ls -d 2000-01-24_*.hpf')

for (read_file in files) {
  print 'Processing', read_file
  write_file := read_file ~ s|\.hpf|.mscal|
  ldred->start([read_file=read_file, write_file=write_file])
  await ldred->finished
}

# Finished with livedata.
print 'Closing down livedata...'
ldred->terminate()
await ldred->done


# Start the gridder.
files := shell('cd', write_dir, '&& ls -d *.mscal')

lsg := gridzilla(remote = T,
                 autosize = T,
                 pixel_width = 4,
                 pixel_height = 4,
                 rangeSpec = 'velocity',
                 startSpec = -508.0,
                 endSpec   =  680.0,
                 pol_op = 'A&B',
                 spectral_id = '0&1',
                 projection = 'SIN',
                 doEquatorial = T,
                 statistic = 'median',
                 clip_fraction = 0.0,
                 beam_weight = 0,
                 beam_FWHM = 14.4,
                 beam_normal = F,
                 kernel_type = 'top-hat',
                 kernel_FWHM = 6.0,
                 cutoff_radius = 6.0,
                 storage = 25,
                 directories = write_dir,
                 files = files,
                 selection = ind(files),
                 write_dir = write_dir,
                 p_FITSfilename = 'hvcred',
                 short_int = F)

# The optional GUI simply reflects what's happening.
lsg->showgui()
await lsg->guidone

# Start processing with these specific arguments.
lsg->go()
await lsg->finished
print 'Finished processing.'

exit
\end{verbatim}

\end{document}

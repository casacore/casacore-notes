%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\mes}{{\em Measure}}
\newcommand{\mess}{{\em Measures}}
\newcommand{\quan}{{\em Quantity}}
\newcommand{\quans}{{\em Quantities}}
\newcommand{\val}{{\sc value}}
\newcommand{\refq}{{\sc reference}}
\newcommand{\refqs}{{\sc references}}
\newcommand{\filit}{\rule{0pt}{0.5\baselineskip}\hspace{\textwidth}}
% Add home page navigation button
%

\htmladdtonavigation{\htmladdnormallink
  {\htmladdimg{../../gif/home.gif}}{{../../html/aips++.html}}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}

This guide gives a short overview of the background and use of the
\mess\ module in C++. Detailed information can be found in the 
\begin{latexonly}
\mess\ module
\end{latexonly}
\begin{htmlonly}
\htmladdnormallink{\mess\ module}{../../aips/implement/Measures.html}
\end{htmlonly}
 description, and in the individual header files of the
classes in this module.

Section 2 explains what a \mes\ consists of, and why; section 3
discusses conversion; section 4 some notes on efficient use and
section 5 gives the common interface of \mess\ and their values. Appendices 
give some details per \mes.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Background}

Currently the following measures exist:
\begin{description}
\item[$Epoch$] a high precision epoch, a moment in time
\item[$Position$] a 3-dimensional position vector, in general indicating
a position w.r.t. Earth
\item[$Direction$] a direction in space (i.e. a position of unit length)
\item[$Frequency$] the frequency of an electro-magnetic wave
\item[$Doppler$] the redshift of an object
\item[$RadialVelocity$] velocity along a direction
\item[$EarthMagneticField$] the earth magnetic field vector 
\item[$Baseline$] a direction with a length
\item[$uvw$] a $u,v,w$ coordinate: a baseline projected on some plane
\end{description}


A specific \mes\ class is indicated with an $M$, e.g. a direction measure is
an $MDirection$.

A \mes\ consists of a \val\ and a \refq. The \val\ of a \mes\ is a vector
of double floating point numbers, in some internal format, independent
of the units used to create them. The \val\ is
called a {\em MeasValue}, and specific ones are indicated with the
letters $MV$, e.g. $MVDirection$
\footnote{Note the
unfortunate circumstance that the classes $MVTime$ and
$MVAngle$, which are not {\em MeasValues}, but only formatting classes
for times and angles, were named as such.}.
Appendix A gives the various internal values.

A \val\ can be constructed in many different ways. An $MVDirection$
can, e.g. be constructed from 2 angles or from 3 direction cosines; an
$MVFrequency$ from a wavelength or the wave energy.

Some \mess\ can often also be obtained from a catalog, especially a list of
observatories, a source list and a spectral line list. They can be
obtained as: \\
\\
\hspace{.05\textwidth}
\begin{minipage}[t]{.9\textwidth}
\begin{verbatim}
    MDirection source;
    MFrequency line;
    MPosition obs;
    if (MeasTable::Observatory(obs, "ATCA")) {};
    if (MeasTable::Line(line, "HI")) {};
    if (MeasTable::Source(source, "0008-421")) {};
\end{verbatim}
\end{minipage}
\\

The \refq\ consists of up to 3 {\em fields}:
\begin{itemize}
\item a {\em reference code}, describing how the \val\ should be
interpreted. This field is mandatory, and has an enumerated value (see
Appendix A for the possible codes). Examples are:
\begin{itemize}
\item {\tt MDirection::J2000}
\item {\tt MDirection::AZEL}
\item {\tt MEpoch::TAI}
\item {\tt MEarthMagnetic::DEFAULT}
\end{itemize}
In some cases the code has all the available information to be able to
interpret the \val\ (like the {\tt MDirection::J2000}). In other cases
the information is not sufficient. An example is the {\tt
MDirection::AZEL}. If you have measured some {\em AZEL} values, and
are only interested in say a pointing model for the telescope, the
{\tt MDirection::AZEL} is sufficient information. However, if you want
to convert the measured {\em AZEL} into a {\em J2000} right ascension
and declination, it is necessary to know where your telescope is, and
what the epoch of the observation is. This can be specified in 
\item a {\em frame}. The {\em frame} is a {\em MeasFrame} class
object, and can contain \mess\ describing the epoch, the position on
Earth, the direction in which you are observing (for Doppler
calculations), the rest frequency of a spectral line and a table
describing the detailed orbit of a non-standard solar system object
(like a comet). The {\em frame} can be filled with the {\em MeasFrame}
constructor, or with {\em MeasFrame} {\tt set()} methods.
\item an optional {\em offset}. In some cases it can be advantageous
to specify an offset. An example could be 0h on a specific date, with
the actual {\em Epoch} only specifying the time since that point in
time. Note that offsets are not very useful for {\em Directions},
since directions are always vectors of unit lengths. However, special
{\tt offset} methods exist for directions.
\end{itemize}

A \refq\ is created as a specialized {\em MeasRef} object, using the
{\tt Measure::Ref} alias (e.g. {\tt MDirection::Ref}). A full
reference could be:\\
\\
\hspace{.05\textwidth}
\begin{minipage}[t]{.9\textwidth}
\begin{verbatim}
   // A time in MJD
   MEpoch epoch(Quantity("50500.5d"), MEpoch::UTC);
   MPosition obs;
   MeasTable::Observatory(obs, "WSRT");
   MeasFrame frame(obs, epoch);
   MDirection::Ref ref(MDirection::VENUS, frame);
\end{verbatim}
\end{minipage}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Conversion}
\begin{sloppypar}
\mess\ can be converted from one \refq\ into another \refq. E.g. from
an {\tt MDirection::J2000} direction coordinate into an {\tt
MDirection::AZEL} coordinate; or from an {\tt MEpoch::UTC} into an 
{\tt MEpoch::TAI}. Conversion objects are {\tt MeasConvert} objects,
using the {\tt Measure::Convert} alias (e.g. {\tt
MDirection::Convert}. The conversion object needs at least a {\em from}
\refq\ and a  {\em to} \refq.
\end{sloppypar}

Example: \\
\\
\hspace{.05\textwidth}
\begin{minipage}[t]{.95\textwidth}
\begin{verbatim}
   MDirection::Convert(MDirection::Ref(MDirection::VENUS,
                                       frame),
                       MDirection::Ref(MDirection::J2000));
\end{verbatim}
\end{minipage}
\\

{\em Note} that if a {\em frame} is necessary, it suffices to give it
with either one of the two \refqs. Unless, of course, they are
different for the two \refqs, like converting the {\tt AZEL} at one
telescope to that at another. The latter case (i.e. two different
reference frames for the input and output values), is handled by
always converting first the input value to the default for the class
(e.g. {\tt J2000} for directions), and then convert this value to the
appropriate output type and frame.

The {\em from} \refq\ can also be specified as a complete \mes. In that
case that \val\ of the \mes\ will act as the {\em default} \val\ to be
converted.

Constructing a conversion object will set up a series of conversions
that have to be done to get from the {\em from} to the {\em to} \refq. This
state-machine like approach is to be able to use less than the
required odd 400 conversion routines for say 20 different allowable
reference codes.

The conversion object is executed with the () operator. The actual
conversion done depends on the argument of the operator:
\begin{itemize}
\item {\em none}: use the default value of the Measure specified in the
constructor (or using a {\tt set()} method).
\item {\em MeasValue}: convert it to a \mes\ using the {\em from}
reference of the object
\item {\em Measure}: re-initialize the conversion object, and do the
conversion with the new default value (since the \refq\ has changed!),
taking the full {\em Measure} into account (including, of course, a
possible reference frame).
\end{itemize}

If the conversion needs information, it will cache anything it
calculates, either in the conversion object (like calculated {\em
Nutation}), or in the {\em frame} (like e.g. the sidereal time of a
frame MEpoch specified in UTC). This information will be re-used if
possible and feasible in subsequent conversions with the same
conversion object or using the same frame.

It is also worth noting that {\em frames} are handled internally by
{\em reference} rather than by {\em value} (e.g. when copied) (the
same is true for {\tt Measure::Ref} objects). One consequence is that
a conversion knows about any change you make to a frame, and will use
it. So, if by a \verb+frame.set(MEpoch)+ the time of a frame is
changed, a subsequent conversion which had that frame given as the
frame to be used, will automatically use the new time.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Efficiency}

The efficiency of the use of the \mess\ and related classes can vary
greatly. By using the appropriate interface, by fine-tuning with the
aid of {\tt aipsrc} variables, and by making sure the caching system
is used optimally, there can be a large reduction in resource use.

\subsection{Measure or MeasValue}

It is not always necessary to use a full-fledged \mes. It often
suffices to use a {\em MeasValue} (or maybe even a \quan\ or just a
simple {\em Double}.

As an example, consider a frequency container object:
\begin{itemize}
\item if you have some box that produces a value that is always in
$GHz$, and that has to be passed-on as-is without any further
information, a {\em Double} is sufficient
\item if the value you have has to be converted to some other
frequency unit (like MHz or so) before being used, use a \quan. The
only knowledge necessary is the units 
\item if you would like the value be represented in other ways
to represent an electro-magnetic wave (like wavelength, time, energy,
impulse, angle/time, time), use an {\em MVFrequency}, which knows that
the value has the properties of an electro-magnetic wave (in addition
to the units)
\item if you would like to know what the frequency really represent
(a spectral rest frequency; a frequency as observed in a telescope; a
frequency as would be observed from the local standard of rest;
\ldots), and if you are going to use that information in one way or another
(display, conversion, archive, \ldots) use an {\em MFrequency} as value
container
\end{itemize}

As a rule of thumb the above could be summarised as: 
\begin{itemize}
\item    designing a user interface: be flexible, use a \mes
\item    designing a hardware interface: use a {\em Double} or {\em Int} 
\item    in internal classes, often use {\em MeasValue}, but will depend
	 on how close you are to user interface or another internal interface 
\end{itemize}

Similar arguments can be used for the other \mess.

\subsection{Re-use the effort of frame}

From the point of view of the programmer, a {\em frame} is just a
container of \mess\ to indicate when, where, in what
direction and at what frequency a certain \mes\ was made or referred
to. However, in actual fact it is also an engine and cache for a lot
of calculations. Imagine that you want to convert from right-ascension
and declination to hour-angle and declination, and that you have
provided an epoch in $UTC$ in the {\em frame}. The actual conversion
object will request (probably among other things), the sidereal time
from the frame. The first request will set up a conversion object
within the frame (from $UTC$ to $LAST$) and cache it for later
use. After that it will use this conversion object to obtain the
sidereal time, and cache the result (for maybe a subsequent call). The
conversion needs nutation, polar motion and a few other
calculations. Again, all of these are cached for subsequent use in
other calls to the frame for information.

Efficient use of \mess\ is only possible if the lifetime of a {\em
frame} is as long as possible. Which suggests that in many cases a
frame should be created at the highest level possible (maybe even
globally). Re-use of a {\em frame}, e.g. for a different time, is made
possible by the {\tt set()} methods, e.g. $set(MEpoch)$, which will
try to minimize the re-calculations necessary. The fact that frames
are always used internally by {\em reference} (see earlier), which
also means that any change made to a frame will automatically be used
by any subsequent conversion which knows about this frame, makes in
principle for an efficient machinery for many different
purposes. However, it could also easily lead to misunderstandings. If
you plan to do any special conversions, the detailed information
provided in the various {\tt Measure} classes should be perused.

\subsection{Re-use of conversion objects}

Similar to the frame discussed in the previous section, a conversion
object (e.g. {\tt MDirection::Convert}) is a repository of the
necessary state-machine to make the conversion possible, and any
intermediate calculation results. To make efficient use of this
information, the same conversion object should be used if more than
one conversion of the same type has to be done.

\subsection{Specialized conversion engines}

Although the official {\tt MeasConvert} objects are very versatile,
using them can be quite a job. For that reason a set of specialized
``Conversion engines'' have been put together for easy use. The three
engines available at the moment are described in the following
paragraphs. They have all a basic format:
\begin{itemize}
\item a constructor is used to create an engine object. The object
knows (either through constructor, or through the use of {\tt set()}
methods) about the conversions to be done
\item the {\em ()} operator is used to convert a value the appropriate
way.
\end{itemize}

\subsubsection{EarthMagneticMachine}

The {\em EarthMagneticMachine} calculates the Earth' magnetic field in
a certain direction at a certain height above the Earth' surface.

The machine object's constructor needs in principle:
\begin{itemize}
\item a direction {\em reference code} to be able to interpret input
direction values
\item height above the Earth' surface
\item position (of observation point) on Earth
\item epoch of observation (the $IGRF$ model used is time dependent)
\end{itemize}

The $()$ operator will produce the line-of-sight component of the
magnetic field (see the header files for details). Other methods exist
to get the complete magnetic field; the longitude of the point
specified and the position on Earth of the point.
The following example calculates the magnetic field at 200$km$ height
at the Compact Array:
\begin{verbatim}
   // Define a time/position frame
   MEpoch epo(MVEpoch(MVTime(98,5,16,0.5).day()));
   MPosition pos;
   MeasTable::Observatory(pos, "ATCA");
   MeasFrame frame(epo, pos);
   // Note that the time in the frame can be changed later
   // Set up a machine
   EarthMagneticMachine exec(MDirection::B1950,
                             Quantity(200, "km"), frame);
   // Given a current observational direction
   MDirection indir(Quantity(3.25745692, "rad"),
                    Quantity(0.040643336,"rad"),
                    MDirection::Ref(MDirection::B1950));
   // The field in this direction is calculated
   exec.calculate(indir.getValue());
   // Show some data
   cout << "Parallel field: " << exec.getLOSField() <<
           " nT" << endl;
   cout << "Sub-ionosphere long: " << exec.getLong("deg") <<
           endl;
\end{verbatim}


\subsubsection{VelocityMachine}
\begin{sloppypar}
The velocity machine converts between frequencies and velocities (or
$vice$ $versa$). This
machine has been developed to aid in the, especially for the beginning
user of \mess, intricate way {\em RadialVelocity}, {\em Doppler} and
{\em Frequency} are connected. The machine converts between $Doppler$
and $Frequency$ values.
\end{sloppypar}
The constructor of the machine needs:
\begin{itemize}
\item a frequency reference (e.g. {\tt MFrequency::LSR}), including a
possible offset and frame
\item preferred frequency units (e.g. $cm$ or $GHz$)
\item velocity reference (e.g. {\tt MDoppler::OPTICAL}), including a
possible offset
\item preferred velocity units (e.g. $AU/a$)
\item the rest frequency used for the conversion, given as an {\tt
MVFrequency}
\end{itemize}

The $()$ operator has an {\tt MVFrequency}, an {\tt MVDoppler} or a
{\tt Quantity} as argument. Depending on if it is a velocity or a
frequency, the argument is converted to the other representation. {\tt
makeFrequency} and {\tt makeVelocity} exist to create a vector of
velocities or frequencies from a vector of Doubles.

An example:
\begin{verbatim}
      // Define a time/position frame
      MEpoch epo(MVEpoch(MVTime(98,5,16,0.5).day()));
      MPosition pos;
      MeasTable::Observatory(pos, "ATCA");
      MeasFrame frame(epo, pos);
      //
      // Note that the time in the frame can be changed later
      // Specify the frequency reference
      MFrequency::Ref fr(MFrequency::LSR);
      //
      // Specify the velocity reference
      MDoppler::Ref vr(MDoppler::OPT);
      //
      // Specify the default units
      Unit fu("eV");
      Unit vu("AU/a");
      //
      // Get the rest frequency
      MVFrequency rfrq(QC::HI);
      //
      // Set up a machine (no conversion of reference frame)
      VelocityMachine exec(fr, fu, rfrq, vr, vu, frame);
      //
      // or as (with conversion of reference frame it
      // could have been)
      // VelocityMachine exec(fr, fu, rfrq, MFrequency::TOPO,
      //                      vr, vu, frame);
      // Given a current observational frequency of 
      //    5.87432837e-06 eV
      // its velocity will be (in AU/yr)
      cout << "Velocity: " <<
              exec.makeVelocity(5.87432837e-06) << endl;
      //
      // Introducing an offset
      MFrequency foff(MVFrequency(Quantity(5.87432837e-06,
                      "eV")), MFrequency::LSR);
      //
      // and setting it in the reference, and regenerating
      // machine:
      fr.set(foff);
      exec.set(fr);
      //
      // the following will give the same result:
      cout << "Velocity: " << exec.makeVelocity(0.0)
           << endl;
\end{verbatim}

\subsubsection{UVWMachine}

The {\em UVWMachine} can convert $UVW$-coordinates between coordinate
systems. In addition it can provide the phase rotation necessary on
the data to have a new fringe-stopping center. A simple conversion of
$UVW$ coordinates will be executed if only the coordinate reference
frame is changed (e.g. from a $J2000$ to a $Galactic$ or an $AzEl$
coordinate system). If also the actual position on the sky is changed,
the phase rotation necessary on the data is provided as well. Fringe
stopping centers can be centered on other bodies as well (e.g. a
planet). Read the caveats in the detailed help file.

The constructor of the machine needs the following input:
\begin{itemize}
\item an input {\tt MDirection} specifying the original fringe
stopping center's position and reference frame
\item an output {\tt reference code} to indicate the output reference
frame of the $UVW$ coordinates; or an output {\tt MDirection}
indicating both the new fringe stopping center and its reference position. 
\end{itemize}

The output of the machine can be one or all of the following:
\begin{itemize}
\item a rotation matrix that can be used to transpose the
$UVW$-coordinates
\item a vector that can be used to produce the necessary phase
rotation
\item actual conversion of a set of input $UVW$ points
\item actual vector of phase rotations for a set of $UVW$ points
\end{itemize}

Example:
\begin{verbatim}
   // Given a current phase stopping Center
   MDirection indir(Quantity(3.25745692, "rad"),
                    Quantity(0.040643336,"rad"),
                    MDirection::Ref(MDirection::B1950));
   // Conversion to J2000 is set by:
   UVWMachine uvm(MDirection::Ref(MDirection::J2000), indir);
   // The rotation matrix to go to new UVW is obtained by:
   RotMatrix rm(uvm.rotationUVM());
   // If an UVW specified:
   MVPosition uvw(-739.048461, -1939.10604, 1168.62562);
   // This can be converted by e.g.:
   uvw *= rm;
   // Or, alternatively, by e.g.:
   uvm.convertUVW(uvw);
\end{verbatim}

\subsection{Specifying execution details}

The precision of a \mes\ conversion can be influenced by the use of
{\em aipsrc} variables. The relevant variables can be found in the
{\em aipsrcdata} section of the standard {\em User Reference
Manual}.
\begin{htmlonly}
\htmladdnormallink{(see here)}{../../user/Refman/Refman.html}.
\end{htmlonly}
Changing the precision will influence the efficiency of the
\mess\ conversion.

Parameters that can be used are, a.o., the length of periods over
which computations can be re-used; if it is necessary to use $IERS$
tables for precise calculation of time and polar motion, or that the
simple model suffices.

A few examples: \\
\\
\begin{tabular}{|l|p{0.4\textwidth}|l|}
\hline
Name & Description &  Default \\ \hline
measures.nutation.d\_interval &
interval in days over which linear
                       interpolation of nutation
                       calculation is appropriate
& 0.04d \\ \hline
measures.nutation.b\_useiers & 
use the IERS Earth orientation
                       parameters tables to calculate
                       nutation
& false \\ \hline
measures.nutation.b\_usejpl &
use the JPL DE database (use
                       measures.jpl.ephemeris to specify
                       which one) to calculate nutation
& false \\ \hline
measures.measiers.b\_notable &
do not use the IERSeop97 or
IERSpredict tables at all for calculations
& false \\ \hline
\end{tabular}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Interface}

The interface to the different \mess\ have a large set of identical
methods. Only when values are clearly related to a specific \mes\
(like e.g. a latitude) does the method to obtain not exist for e.g. a
frequency.
Constructors of \mess\ have often specializations (like one with a
longitude and latitude for a direction), but they all have also
standard ones. The standard ones are described in the
\begin{latexonly}
Measure.h class description.
\end{latexonly}
\begin{htmlonly}
\htmladdnormallink{Measures.h}{../../aips/implement/Measures/Measure.html}
class description.
\end{htmlonly}

\subsection{Getting values from a Measure}

The various value that are contained in the \mes\ object can be
obtained by the following calls:
\begin{description}
\item[$getValue()$] will obtain the {\em MeasValue} (i.e. the {\em
MV$Name$} object) from the \mes\ 
\item[$getData()$] will obtain a pointer to the {\em MeasValue}
\item[$getRef()$] will obtain the {\tt Measure::Ref} reference object
\item[$getRefPtr()$] will obtain a pointer to the {\tt Measure::Ref} object
\item[$get()$] defined for some to get the data in special form (with
specifiable units
\item[$getAngle()$] defined for some to get the data in angle (with
specifiable units)
\end{description}

General calls are available to obtain the information contained in the
{\tt Measure::Ref} object:
\begin{description}
\item[$getType()$] will obtain the reference code from the {\tt
Measure::Ref} object 
\item[$getFrame()$] will obtain the frame from the {\tt Measure::Ref}
object
\item[$offset()$] will return the pointer to the offset (or 0 if no
offset specified)
\end{description}

{\tt set()} methods are available to fill in the fields in the {\tt
Measure::Ref} object. 

\subsection{Getting values from a MeasValue}

Each {\tt MeasValue} has methods to obtain the internal data in a
standard way. Some have additional ones available when appropriate
(like {\em getLong()}):
\begin{description}
\item[$getVector()$] will always return the internal value as a
\verb+Vector<Double>+
\item[$getValue$] will obtain the internal value as a $Double$ or as a
\verb+Vector<Double>+, depending on the dimension of the internal
value. The units of the value returned will be the internally used
ones (e.g. $m$ for a position, $s$ for a time.
\item[$get()$] will obtain the internal value as a {\em Quantity} or
as a \verb+Vector<Double>+. If a quantity, the default units are the
interanls one, but the output units can be selected as well.
\end{description}

\subsection{Obtaining information from the MeasFrame}

The frame can be used as an automatic converter. An example could be
the automatic conversion to a sidereal time from a civil time (like
$UTC$). All conversions that are used internally by the various conversion
engines are available. Of course, the epoch should have been put into
the frame for it to be converted; and in this case also the position
should have been put into it. Available information from the frame: \\
\\
\small
\hspace{.05\textwidth}
\begin{minipage}[t]{.95\textwidth}
\begin{verbatim}
  // Get the epoch pointer (0 if not present)
  const Measure *const epoch() const;
  // Get the position pointer (0 if not present)
  const Measure *const position() const;
  // Get the direction pointer (0 if not present)
  const Measure *const direction() const;
  // Get the radial velocity pointer (0 if not present)
  const Measure *const radialVelocity() const;
  // Get the comet pointer (0 if not present)
  const MeasComet *const comet() const;
  // Get data from frame.
  // Only available if appropriate measures are set,
  // and the frame is in a calculating state.
  // <group>
  // Get TDB in days
  Bool getTDB(Double &tdb);
  // Get the longitude (in rad)
  Bool getLong(Double &tdb);
  // Get the latitude (in rad)
  Bool getLat(Double &tdb);
  // Get the position
  Bool getITRF(MVPosition &tdb);
  // Get the geocentric position (in m)
  Bool getRadius(Double &tdb);
  // Get the LAST (in days)
  Bool getLAST(Double &tdb);
  // Get the LAST (in rad)
  Bool getLASTr(Double &tdb);
  // Get J2000 coordinates (direction cosines)
  Bool getJ2000(MVDirection &tdb);
  // Get B1950 coordinates (direction cosines)
  Bool getB1950(MVDirection &tdb);
  // Get apparent coordinates (direction cosines)
  Bool getApp(MVDirection &tdb);
  // Get LSR radial velocity (m/s)
  Bool getLSR(Double &tdb);
  // Get the comet table reference type
  Bool getCometType(uInt &tdb);
  // Get the comet coordinates
  Bool getComet(MVPosition &tdb);
  // </group>
\end{verbatim}
\end{minipage}
\\
\normalsize

In the above reference is made to the {\em calculating state} of the
frame. This state is set when the frame has been actively used by a
{\tt Measure::Convert} engine (i.e. have at least one {\em operator()}
executed); or if you do it explicitly with:
\verb+MCFrame::make(frame);+.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\appendix
\section{Appendix}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Background literature}

More information on the different astronomical conventions and data
can be found in: \\

\noindent
{\bf Time, Coordinates}
\begin{itemize}
\item {\em Explanatory Supplement to the Astronomical Almanac},
P.K. Seidelman {\em et al.}, University Science Books, $1992$
\item {\em The Astronomical Almanac for the year yyyy}, London: The
Stationary Office; Washington: U.S. Government Printing Office
\item the ``International Celestial Reference System'' 
\begin{latexonly}
($ICRS$) \\({\em 
http://hpiers.obspm.fr/webiers/general/syframes/icrsf/ICRS.html})
\end{latexonly}
\begin{htmlonly}
\htmladdnormallink{($ICRS$)}
{http://hpiers.obspm.fr/webiers/general/syframes/icrsf/ICRS.html}
\end{htmlonly}
\end{itemize}

\noindent
{\bf Positions}
\begin{itemize}
\item the $IERS$ 
\begin{latexonly}
website \\({\em http://hpiers.obspm.fr/})
\end{latexonly}
\begin{htmlonly}
\htmladdnormallink{website}{http://hpiers.obspm.fr/}
\end{htmlonly}
\end{itemize}

\noindent
{\bf Frequency, Doppler, Velocity}
\begin{itemize}
\item any astronomical textbook
\end{itemize}

\noindent
{\bf Magnetic field}
\begin{itemize}
\item the $IAGA$ 
\begin{latexonly}
website \\({\em http://www.ngdc.noaa.gov/IAGA/wg8/})
\end{latexonly}
\begin{htmlonly}
\htmladdnormallink{website}{http://www.ngdc.noaa.gov/IAGA/wg8/}
\end{htmlonly}
\end{itemize}

\noindent
{\bf Baseline, uvw} 
\begin{itemize}
\item any textbook on radio astronomy
\end{itemize}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Details for individual Measures}

In the following some comments are made per \mes\ type. A list is
given of the known reference codes, and the frame information
necessary to convert from/to each code is indicated.

\subsubsection{MEpoch}

An epoch in time. Internally maintained as an absolute time as a {\em
Modified Julian Day} (or a {\em Greenwich Sidereal Date}) in two
{\tt Double} numbers. Formatting of an {\em MEpoch} (or any time
expressed in time or angle units) can be done with the {\em MVTime}
class. \\
\\
\begin{tabular}{||p{0.21\textwidth}|p{0.48\textwidth}|p{0.21\textwidth}||}
\hline \hline
\multicolumn{3}{||c||}{{\bf MEpoch}} \\ \hline \hline
\multicolumn{1}{||c}{{\em Code}} & 
\multicolumn{1}{|c}{{\em Description}} & 
\multicolumn{1}{|c||}{{\em Frame info}} \\ \hline \hline
    LAST & Local Apparent Sidereal Time  & MPosition \\ \hline
    LMST & Local Mean Sidereal Time & MPosition \\ \hline
    GMST1 & Greenwich Mean ST1 &  \\ \hline
    GAST & Greenwich Apparent ST &  \\ \hline
    UT1 &  &  \\ \hline
    UT2 &  &  \\ \hline
    UTC &  &  \\ \hline
    TAI &  &  \\ \hline
    TDT &  &  \\ \hline
    TCG &  &  \\ \hline
    TDB &  &  \\ \hline
    TCB &  &  \\ \hline
    IAT & $= TAI$ &  \\ \hline
    GMST & $= GMST1$ & MPosition \\ \hline
    TT & $= TDT$ &  \\ \hline
    UT & $= UT1$ &  \\ \hline
    ET & $= TT$ &  \\ \hline
    DEFAULT & $= UTC$ &  \\ \hline \hline
\end{tabular}
\\

A special code modifier {\tt MEpoch::RAZE} exist. Its result is that
{\em after} a conversion to a code with the {\tt RAZE} bit set, the
result will be truncated to integer days. Useful to find a sidereal
time offset for a specific $UTC$ date.

\subsubsection{MPosition}

A 3-dimensional vector, especially a position on (or rather {\em
w.r.t.} Earth). Internally represented as a \verb+Vector<Double>+ with
assumed units of $m$, independent of the constructing units. Normally
given as a longitude, latitude and height (geodetic), or as a vector
with origin in center of Earth. 

The internal value of the {\tt MPosition} class (i.e. {\em
MVPosition}) is also the base class for the contents of the other
3-dimensional position and direction classes:
\begin{itemize}
\item MVDirection
\item MVEarthMagnetic
\item MVBaseline
\item MVuvw
\end{itemize}

\noindent
\begin{tabular}{||p{0.21\textwidth}|p{0.48\textwidth}|p{0.21\textwidth}||}
\hline \hline
\multicolumn{3}{||c||}{{\bf MPosition}} \\ \hline \hline
\multicolumn{1}{||c}{{\em Code}} & 
\multicolumn{1}{|c}{{\em Description}} & 
\multicolumn{1}{|c||}{{\em Frame info}} \\ \hline \hline
ITRF & International Terrestrial Reference Frame & \\ \hline
WGS84 & World Geodetic System & \\ \hline
DEFAULT & $= ITRF$ & \\ \hline \hline
\end{tabular}
\\

\subsubsection{MDirection}

A 3-dimensional vector {\bf of unit length}, indicating a direction,
especially a direction in space (note that for the Solar system bodies
the distance to the bodies is inherently known).

The solar system bodies' directions are {\em virtual} directions. They
have no value until explicitly converted to a {\em real} coordinate
system like $J2000$, $AZEL$, \ldots
\\
\small
\begin{tabular}{||p{0.21\textwidth}|p{0.48\textwidth}|p{0.21\textwidth}||}
\hline \hline
\multicolumn{3}{||c||}{{\bf MDirection}} \\ \hline \hline
\multicolumn{1}{||c}{{\em Code}} & 
\multicolumn{1}{|c}{{\em Description}} & 
\multicolumn{1}{|c||}{{\em Frame info}} \\ \hline \hline
J2000 & mean equator, equinox J2000.0 &  \\ \hline
JMEAN & mean equator, equinox epoch & MEpoch \\ \hline
JTRUE & true equator, equinox epoch & MEpoch \\ \hline
APP & apparent geocentric & MEpoch \\ \hline
B1950 & mean equator, equinox B1950.0 &  \\ \hline
BMEAN & mean equator, equinox epoch & MEpoch \\ \hline
BTRUE & true equator, equinox epoch & MEpoch \\ \hline
GALACTIC & galactic coordinates &  \\ \hline
HADEC & topocentric HA/Dec & MEpoch \filit MPosition \\ \hline
AZEL & topocentric Az/El (N $\Rightarrow$ E) & MEpoch \newline MPosition
		\\ \hline 
AZELSW & topocentric Az/El (S $\Rightarrow$ W) & MEpoch  \filit
		MPosition \\ \hline 
AZELNE & $= AZEL$ & MEpoch \\ \hline
JNAT & geocentric natural frame & MEpoch \\ \hline
ECLIPTIC & ecliptic for J2000.0 equator, equinox &  \\ \hline
MECLIPTIC & ecliptic for mean equator of date & MEpoch \\ \hline
TECLIPTIC & ecliptic for true equator of date & MEpoch \\ \hline
SUPERGAL & supergalactic coordinates &  \\ \hline
ITRF & direction in ITRF Earth frame & MEpoch  \filit
		MPosition \\ \hline
TOPO & apparent topocentric & MEpoch \\ \hline
MERCURY & from JPL DE table & MEpoch \\ \hline
VENUS &  & MEpoch \\ \hline
MARS &  & MEpoch \\ \hline
JUPITER &  & MEpoch \\ \hline
SATURN &  & MEpoch \\ \hline
URANUS &  & MEpoch \\ \hline
NEPTUNE &  & MEpoch \\ \hline
PLUTO &  & MEpoch \\ \hline
SUN &  & MEpoch \\ \hline
MOON &  & MEpoch \\ \hline
COMET & any solar-system body & MEpoch \filit 
		Table\footnotemark \\ \hline
DEFAULT & $= J2000$ &  \\ \hline \hline
\end{tabular}
\\
\normalsize
\footnotetext{The table needed contains a list of directions and
distances as a function of $MJD$. The table can be generated from a
standard formatted ascii text by the {\tt measuresdata} Glish
module. See there for how to generate a table. In future an $XML$
driven parser could be used}

\subsubsection{MBaseline}

A 3-dimensional vector, indicating a direction with a length (but no
defined zero point). In principle they are identical to the {\em
MDirection} directions. At the momemt the solar system bodies are not
a valid baseline direction, but that could change.\\
\\
\begin{tabular}{||p{0.21\textwidth}|p{0.48\textwidth}|p{0.21\textwidth}||}
\hline \hline
\multicolumn{3}{||c||}{{\bf MBaseline}} \\ \hline \hline
\multicolumn{1}{||c}{{\em Code}} & 
\multicolumn{1}{|c}{{\em Description}} & 
\multicolumn{1}{|c||}{{\em Frame info}} \\ \hline \hline
J2000 & mean equator, equinox J2000.0 &  \\ \hline
JMEAN & mean equator, equinox epoch & MEpoch \\ \hline
JTRUE & true equator, equinox epoch & MEpoch \\ \hline
APP & apparent geocentric & MEpoch \\ \hline
B1950 & mean equator, equinox B1950.0 &  \\ \hline
BMEAN & mean equator, equinox epoch & MEpoch \\ \hline
BTRUE & true equator, equinox epoch & MEpoch \\ \hline
GALACTIC & galactic coordinates &  \\ \hline
HADEC & topocentric HA/Dec & MEpoch \filit MPosition \\ \hline
AZEL & topocentric Az/El (N $\Rightarrow$ E) & MEpoch \newline MPosition
		\\ \hline 
AZELSW & topocentric Az/El (S $\Rightarrow$ W) & MEpoch  \filit
		MPosition \\ \hline 
AZELNE & $= AZEL$ & MEpoch \\ \hline
JNAT & geocentric natural frame & MEpoch \\ \hline
ECLIPTIC & ecliptic for J2000.0 equator, equinox &  \\ \hline
MECLIPTIC & ecliptic for mean equator of date & MEpoch \\ \hline
TECLIPTIC & ecliptic for true equator of date & MEpoch \\ \hline
SUPERGAL & supergalactic coordinates &  \\ \hline
ITRF & direction in ITRF Earth frame & MEpoch  \filit
		MPosition \\ \hline
DEFAULT & $= ITRF$ &  \\ \hline \hline
\end{tabular}
\\

\subsubsection{Muvw}

A 3-dimensional vector, indicating a $UVW$-coordinate.\\
\\
\begin{tabular}{||p{0.21\textwidth}|p{0.48\textwidth}|p{0.21\textwidth}||}
\hline \hline
\multicolumn{3}{||c||}{{\bf Muvw}} \\ \hline \hline
\multicolumn{1}{||c}{{\em Code}} & 
\multicolumn{1}{|c}{{\em Description}} & 
\multicolumn{1}{|c||}{{\em Frame info}} \\ \hline \hline
J2000 & mean equator, equinox J2000.0 &  \\ \hline
JMEAN & mean equator, equinox epoch & MEpoch \\ \hline
JTRUE & true equator, equinox epoch & MEpoch \\ \hline
APP & apparent geocentric & MEpoch \\ \hline
B1950 & mean equator, equinox B1950.0 &  \\ \hline
BMEAN & mean equator, equinox epoch & MEpoch \\ \hline
BTRUE & true equator, equinox epoch & MEpoch \\ \hline
GALACTIC & galactic coordinates &  \\ \hline
HADEC & topocentric HA/Dec & MEpoch \filit MPosition \\ \hline
AZEL & topocentric Az/El (N $\Rightarrow$ E) & MEpoch \newline MPosition
		\\ \hline 
AZELSW & topocentric Az/El (S $\Rightarrow$ W) & MEpoch  \filit
		MPosition \\ \hline 
AZELNE & $= AZEL$ & MEpoch \\ \hline
JNAT & geocentric natural frame & MEpoch \\ \hline
ECLIPTIC & ecliptic for J2000.0 equator, equinox &  \\ \hline
MECLIPTIC & ecliptic for mean equator of date & MEpoch \\ \hline
TECLIPTIC & ecliptic for true equator of date & MEpoch \\ \hline
SUPERGAL & supergalactic coordinates &  \\ \hline
ITRF & direction in ITRF Earth frame & MEpoch  \filit
		MPosition \\ \hline
DEFAULT & $= ITRF$ &  \\ \hline \hline
\end{tabular}
\\

\subsubsection{MEarthMagnetic}

A 3-dimensional vector: the value of the Earth' magnetic field. The
model used to calculate the field is the International Geomagnetic
Reference Field. The $IGRF$ field is a {\em virtual} field, without
any value. It obtains its value after an explicit conversion to a
normal, real coordinate system.\\
\\
\begin{tabular}{||p{0.21\textwidth}|p{0.48\textwidth}|p{0.21\textwidth}||}
\hline \hline
\multicolumn{3}{||c||}{{\bf MEarthMagnetic}} \\ \hline \hline
\multicolumn{1}{||c}{{\em Code}} & 
\multicolumn{1}{|c}{{\em Description}} & 
\multicolumn{1}{|c||}{{\em Frame info}} \\ \hline \hline
IGRF & the international reference field model & MEpoch \newline
		 MPosition \\ \hline
J2000 & mean equator, equinox J2000.0 &  \\ \hline
JMEAN & mean equator, equinox epoch & MEpoch \\ \hline
JTRUE & true equator, equinox epoch & MEpoch \\ \hline
APP & apparent geocentric & MEpoch \\ \hline
B1950 & mean equator, equinox B1950.0 &  \\ \hline
BMEAN & mean equator, equinox epoch & MEpoch \\ \hline
BTRUE & true equator, equinox epoch & MEpoch \\ \hline
GALACTIC & galactic coordinates &  \\ \hline
HADEC & topocentric HA/Dec & MEpoch \filit MPosition \\ \hline
AZEL & topocentric Az/El (N $\Rightarrow$ E) & MEpoch \newline MPosition
		\\ \hline 
AZELSW & topocentric Az/El (S $\Rightarrow$ W) & MEpoch  \filit
		MPosition \\ \hline 
AZELNE & $= AZEL$ & MEpoch \\ \hline
JNAT & geocentric natural frame & MEpoch \\ \hline
ECLIPTIC & ecliptic for J2000.0 equator, equinox &  \\ \hline
MECLIPTIC & ecliptic for mean equator of date & MEpoch \\ \hline
TECLIPTIC & ecliptic for true equator of date & MEpoch \\ \hline
SUPERGAL & supergalactic coordinates &  \\ \hline
ITRF & direction in ITRF Earth frame & MEpoch  \filit
		MPosition \\ \hline
DEFAULT & $= ITRF$ &  \\ \hline \hline
\end{tabular}
\\

\subsubsection{MFrequency}

The {\tt MFrequency} class describes the characteristics of an
electro-magnetic wave. Internally the value is in $Hz$, but an {\em
MFrequency} object can be constructed from any characteristic that is
understood (period, frequency, angular frequency, wavelength, wave
number, energy, momentum).

The {\em MFrequency} class has special methods to convert the frequency
from an {\em MDoppler} object, if a rest frequency is known.\\
\\
\begin{tabular}{||p{0.21\textwidth}|p{0.48\textwidth}|p{0.21\textwidth}||}
\hline \hline
\multicolumn{3}{||c||}{{\bf MFrequency}} \\ \hline \hline
\multicolumn{1}{||c}{{\em Code}} & 
\multicolumn{1}{|c}{{\em Description}} & 
\multicolumn{1}{|c||}{{\em Frame info}} \\ \hline \hline
REST & spectral line rest frequency & MDirection \newline 
		MRadialVelocity \\ \hline
LSR  & dynamic local standard of rest & MDirection \\ \hline
LSRK & kinematic local standard of rest & MDirection \\ \hline
BARY & barycentric frequency & MDirection \\ \hline
GEO & geocentric frequency & MDirection \newline
		MEpoch \\ \hline
TOPO & topocentric frequency & MDirection \newline
		MEpoch \newline MPosition \\ \hline
GALACTO & galactocentric  frequency & MDirection \\ \hline
DEFAULT & $= LSR$ &  \\ \hline \hline
\end{tabular}
\\

\subsubsection{MRadialVelocity}

The {\tt MRadialVelocity} class describes the radial velocity of an
astronomical object. Internally the value is in $m/s$. Methods are
available (if the rest frequency of a spectral line is known), to
convert the velocity to a frequency. Also, the radial velocity can be
derived from an {\em MDoppler} object, which has the radial velocity
in the often better known redshift or radio-astronomical Doppler shift.\\
\\
\begin{tabular}{||p{0.21\textwidth}|p{0.48\textwidth}|p{0.21\textwidth}||}
\hline \hline
\multicolumn{3}{||c||}{{\bf MRadialVelocity}} \\ \hline \hline
\multicolumn{1}{||c}{{\em Code}} & 
\multicolumn{1}{|c}{{\em Description}} & 
\multicolumn{1}{|c||}{{\em Frame info}} \\ \hline \hline
LSR  & dynamic local standard of rest & MDirection \\ \hline
LSRK & kinematic local standard of rest & MDirection \\ \hline
BARY & barycentric frequency & MDirection \\ \hline
GEO & geocentric frequency & MDirection \newline
		MEpoch \\ \hline
TOPO & topocentric frequency & MDirection \newline
		MEpoch \newline MPosition \\ \hline
GALACTO & galactocentric  frequency & MDirection \\ \hline
DEFAULT & $= LSR$ &  \\ \hline \hline
\end{tabular}
\\

\subsubsection{MDoppler}

The {\tt MDoppler} class describes the radial velocity of an
astronomical object in a variety of special astronomical ``Doppler''
shifts. It can be generated from quasi velocities; or from a
dimensionless quantity, interpreted as a fraction of the velocity of
light.

Conversion to a ``real'' radial velocity is possible with this class.
In the following $F$ stands for $\nu / \nu_0$, where $\nu_{0}$ is the
rest frequency.\\
\\
\begin{tabular}{||p{0.21\textwidth}|p{0.48\textwidth}|p{0.21\textwidth}||}
\hline \hline
\multicolumn{3}{||c||}{{\bf MDoppler}} \\ \hline \hline
\multicolumn{1}{||c}{{\em Code}} & 
\multicolumn{1}{|c}{{\em Description}} & 
\multicolumn{1}{|c||}{{\em Frame info}} \\ \hline \hline
RADIO & radio definition:  $1-F$ & \\ \hline
Z & redshift: $-1 + 1/F$ & \\ \hline
RATIO & frequency ratio: $F$ & \\ \hline
BETA & relativistic: $(1 - F^{2})/(1 + F^{2})$ & \\ \hline
GAMMA & $(1 + F^{2})/2F$ & \\ \hline
OPTICAL & $= Z$ & \\ \hline
RELATIVISTIC & $=BETA$ & \\ \hline
DEFAULT & $=RADIO$ & \\ \hline \hline
\end{tabular}
\\

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


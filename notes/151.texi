\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename exception.info
@settitle Exception Handling
@c %**end of header

@ifinfo
This document discusses the exception handling mechanism used in @sc{aips++}.
It is based on a paper by William Miller from the 1988 Usenix Conference
@footnote{W. Miller, "Exception Handling Without Language Extensions", 1988
Usenix C++ Conference Proceedings}. In addition, an interface is built on top
of this exception handling mechanism which is compliant with ARM style 
exception handling mechanism.
@end ifinfo

@titlepage
@title Exception Handling in AIPS++
@subtitle DRAFT Version
@vskip 0pt plus 1fill
@author Darrell Schiebel
Last modified: $Date$
By: $Author$
@c The above line is maintained by RCS - do not modify it.
@end titlepage

@node Top, Overview, (dir), (dir)

@chapter Introduction

The main intent of this paper is to provide a user level introduction to
the @sc{aips++} exception mechanism with a basic introduction to the
implementation. This should allow developers to use the mechanism.

This package provides a method to handle exceptional conditions. When
such conditions arise, control is transferred to a code block which
can handle the exception, if one exists. If no handler exists which is capable
of handling the exception, the program is aborted. This package handles 
cleaning up the call stack which may have been created between when the handler
was @emph{installed} and when the exception was thrown. In addition, any
objects@footnote{The objects must be derived from the @code{Cleanup} object
somewhere in it inheritance hierarchy to be automatically deleted} which were
created during this period will be deleted.

This provides a mechanism for transferring control from the point where an
exceptional condition occurs to the code to handle the exception without
memory leaks. Some of the advantages of this approach are:
@itemize @bullet
@item
The code to display the error message can be moved out to the appropriate
level. Otherwise, the code to display an error message might have to be
deep within an application in a place which could otherwise be independent
of the graphical user interface. Without exceptions error messages must be 
carefully propagated out via return values until the appropriate level for 
their display is reached.
@item
The exception mechanism allows for an incremental graceful exit. The same 
exception can be thrown a number of times so that each layer of the program
can have a chance to respond to the exception as appropriate. This can be
important for maintaining the integrity of portions of the program, e.g.
the user interface or database portions.
@item
Using exceptions a program can continue after an error even though
the error may have been fatal at the point where it occurs. In a more 
traditional approach, this would require careful checks of return codes.
@end itemize
@noindent
So while everything which can be accomplished with exceptions can be 
accomplished with returned error codes or other traditional approaches, the
use of exceptions is cleaner.


@chapter Interface

This section describes the @sc{aips++} exception mechanism from the 
perspective of a ``user'' of the system. It discusses the ARM interface, the
mechanisms for automatic deletion of dynamically created objects, and the
steps necessary to create new exception types whose objects can be 
@emph{thrown}.

@section ARM Interface

The @sc{aips++} exception interface conforms to the standards outlined in 
the ARM. The ARM exceptions are based on the idea of @code{try} and 
@code{catch} blocks. The @code{try} block contains the code
which may throw an exception, and the @code{catch} block, which for the
@sc{aips++} mechanism must follow immediately after the @code{try} block,
contains the handlers for the various exceptions which may be thrown in the
@code{try} block. So in the simple case, one might have:
@example
try @{
  if (how_many == 1) throw(MajorError(1));
  if (how_many == 2) throw(MinorError(2));
  if (how_many == 3) throw(TypedError(3));
@} catch (TypedError xx) @{
  cout << "Caught TypedError" << endl;
@} catch (MinorError xx) @{
  cout << "Caught MinorError" << endl;
@} catch (MajorError xx) @{
  cout << "Caught MajorError" << endl;
@} end_try;
@end example
@noindent
The @code{end_try} is not part of the ARM standard, but it is required for the
@sc{aips++} mechanism. Also, on some platforms catching a @emph{reference} 
instead of a @emph{pointer} or an @emph{object} can cause errors as a result
of the exceptions implementation. In this example, depending on the variable 
@code{how_many} a different exception will be thrown, via @code{throw()}.
The exception will then be caught by the first @code{catch} block that
matches the exception. Thus, if @code{MinorError} was derived from 
@code{TypedError}, then the @code{TypedError} block would be executed before 
the @code{MinorError} block for a thrown @code{MinorError}. 

It is also possible to have incremental recovery. A @emph{caught} exception
can be @emph{rethrown} with @code{rethrow()}. The following example 
illustrates this usage:
@example
try @{
  if (how_many == 1) throw(MajorError(1));
  if (how_many == 2) throw(MinorError(2));
  if (how_many == 3) throw(TypedError(3));
@} catch (MinorError xx) @{
  cout << "Caught MinorError" << endl;
@} catch (MajorError xx) @{
  cout << "Caught MajorError" << endl;
  rethrow;
@} catch (TypedError xx) @{
  cout << "Caught TypedError" << endl;
@} end_try;
@end example
@noindent
In this example, the @code{MajorError} catch block handles a @code{MajorError}
when it occurs and then @emph{rethrows} the exception so that it could be
handled by other catch blocks. Thus, if @code{MajorError} is derived from
@code{TypedError}, then the @code{TypedError} catch block would have the
opportunity to handle its portion of the error after the @code{MajorError}
catch block was finished. 

These @code{try}/@code{catch} blocks can be nested to the level necessary as
long as the introductory @code{try} is balanced with a closing @code{end_try}.
The following example contains a nested try block:
@example
try @{
  if (how_many == 0) throw(ExcpError(1));
  try @{
    if (how_many == 1) throw(ExcpError(1));
    if (how_many == 2) throw(ExcpError(2));
    if (how_many == 3) throw(ExcpError(3));
  @} catch (ExcpError xx) @{
    throw(ExcpError(9));
  @} end_try;
@} catch (ExcpError xx) @{
  cout << "Caught ExcpError" << endl;    
@} end_try;
@end example

@section Cleanup Objects

Another important portion of the exception handling mechanism is the section
which manages the objects created between the point where the
@code{try}/@code{catch} blocks are entered and the point where the exception
is thrown. These object are automatically cleaned up when an exception
occurs. The destructors are called for dynamically created objects, 
automatically created objects and objects which are @emph{physically} members
of another object. Also, the storage space for dynamically created objects is 
freed. 

However, the user must do a few things to allow this to happen. The
objects which are to be cleaned up in the event of an exception must be
derived from the @code{Cleanup} class. Any objects belonging to a 
class derived from @code{Cleanup} which were created between the point 
where the @code{catch} block that handles the exception is entered and the
point where the exception was @emph{thrown} will be automatically deleted.

The class designer must also supply a @code{cleanup()} function for each
of the classes to be cleaned up in the event of an exception. This function
should call the class' destructor:
@example
class foo: public Cleanup @{
  public:
    ~foo() @{@}
    void cleanup() @{this->foo::~foo();@}
@};
@end example
@noindent
@code{this->foo::~foo()} is the best way for a member function to call its
class' destructor. Other methods may fail on some platforms. In addition,
one should not rely on @code{cleanup()} being called; the destruction code
should reside in the destructor. If a class which is derived from 
@code{Cleanup} fails to provide a @code{cleanup()} member, then the destructor
for that class may not be called.

One important member function which one inherits from @code{Cleanup} is
@code{makePermanent()}. This function removes the object from the control
of the @emph{cleanup} mechanism, thus the object can @emph{survive} future
exceptions. 

@section Creating Exception Types

One of the advantages of the @sc{aips++} exception mechanism is that one can
design a class hierarchy of exceptions. This results in an a great amount 
of flexibility. The reason for this is that one can @emph{catch} whole groups 
of exceptions with one catch block, and then handle them as appropriate. One 
can also catch an exception with a specific handler, and the @emph{rethrow} 
the exception so that it can be caught with a more general handler.

The root of the exception hierarchy is the class @code{ExcpError}. This class
must be the base class for all new exception hierarchies. All of the exceptions
which are part of the @sc{aips++} kernel, @code{IndexError}, @code{AllocError},
etc., are derived from the @code{AipsError}. Thus, if one wished, all 
exceptions resulting from the @sc{aips++} kernel could be caught by one catch
block which catches @code{AipsError}s, or all exceptions generated could be 
caught by a catch block which catches @code{ExcpError}s. Generally, it is a
good practice to derive all exceptions for a given library from a library
specific exception class, e.g. @code{AipsError}, which is in turn derived 
from @code{ExcpError}.

To add an exception class, a particular constructor must be supplied, a
constructor which takes an @code{ExcpError} pointer as a parameter. For 
example, the following is the definition of the @code{AipsError} class:
@example
class AipsError : public ExcpError @{
  protected:
    String message;
  public:
    const String &getMesg() const @{return(message);@}
    AipsError(const Char *str=0) : message(str) @{message.makePermanent();@}
    AipsError(const String &str) : message(str) @{message.makePermanent();@}
    AipsError(ExcpError *excp) : ExcpError(excp)@{
      AipsError *tmp;
      if (tmp = (checked (AipsError *) excp)) @{
        _equal = True;
        message = tmp->message;
        message.makePermanent();
      @} else @{
        _equal = False;
      @}
    @}
    ~AipsError()@{@}
@};
@end example
@noindent
The reason why the constructor which takes an @code{ExcpError} pointer is
a bit opaque is because this constructor is the only hook which is available
to the exception handling mechanism to perform a @emph{type comparison} to 
determine if the exception being caught matches the type of the thrown
exception. This comparison is taking place on the line where the 
@emph{checked} cast is applied @footnote{See @sc{aips++} note 150 for more 
information about the run time type system.}. If the cast is successful, 
then the @code{_equal} boolean member variable is set to @code{True}, 
otherwise it is set to @code{False}. This flag indicates if the catch 
clause to which this object belongs should be executed.

One of the @strong{most} important things to note about this example it that 
it contains a @code{String} member variable. @code{String} is derived from the 
@code{Cleanup} class, so ordinarily the @code{message} member variable
would be destructed whenever an exception occurred. However, in this case 
that would be disastrous because the whole point is for the @code{String} 
to persist from the point where the exception is thrown to the point where 
it is caught. The @code{makePermanent()} function calls removes the management
of @code{message} from the control of the exception mechanism. If this
call were taken out, the @code{message} would be created as part of the
@code{throw()}, but the @code{message}'s destructor would later be called as 
part of the exception process, destroying the message before the @code{catch}.

There are two cases where one must worry about unintended destruction as the
result of an exception:
@enumerate
@item
objects stored in an error class, e.g. @code{AipsError} above
@item
object pointers stored by another object, where either object is derived
from @code{Cleanup}
@end enumerate
@noindent
In the the first case, the stored object is deleted as a result of the
exception process when it @emph{must} survive to be returned for a catch
block as discussed above. In the second case, a pointer to an object is saved 
and if not made permanent the stored object is open to unintentional 
deletion. For example,
@example
Slist<String*> list;
try @{
  list.addRight(new String("hello"));
  throw(ExcpError());
@} catch (ExcpError x) @{
@} end_try;
@end example
@noindent
In this case, @code{list} is allocated outside of the @code{try} block so
it will survive any exceptions thrown within the try block. However, the
@code{String} object which is created and stored inside of list in the
@code{try} block will not survive the thrown @code{ExcpError}; it will be
deleted unless steps are taken to prevent its deletion. Unfortunately, after 
the @code{try} block @code{list} still retains a pointer to the now deleted 
@code{String} object. The @code{String} object needs to be made permanent 
to prevent this from happening.

The @code{makePermanent} member function is not always sufficient. Take the
@code{IndexError} class as an example,
@example
template<class t> class IndexError<t> : public IndexError @{
  protected:
    FreezeCleanup f;
    t oIndex;                 // Offending Index
    UnfreezeCleanup u;
  public:
    IndexError<t>(t oI, const Char *str=0) : oIndex(oI), IndexError(str) @{@}
    IndexError<t>(t oI, const String &str) : oIndex(oI), IndexError(str) @{@}
    IndexError<t>(ExcpError *excp) : IndexError(excp) @{
      IndexError<t> *tmp;
      if (tmp = (checked (IndexError<t> *) excp)) @{
        oIndex = (*tmp).oIndex;
        _equal = True;
      @} else @{
        _equal = False;@}@}
@};
@end example
@noindent
There the offending index, @code{oIndex}, is stored as a value. There are
no problems if the type of @code{oIndex} happens to be @code{Int}, but if 
its type is @code{String} we have problems once again. In this case, 
@code{makePermanent} cannot be called because the type, @code{t}, is 
not known, and thus it may or may not have a @code{makePermanent} member 
function. The @code{FreezeCleanup} and @code{UnfreezeCleanup} classes solve 
the problem in this case. The @code{FreezeCleanup} object suspends 
@code{Cleanup} management until either the @code{FreezeCleanup} object, 
here @code{f}, is deleted or an @code{UnfreezeCleanup} object is created. In 
the above example, @code{f} is initialized suspending @code{Cleanup} 
management in the process, @code{oIndex} is initialized unmanaged by 
@code{Cleanup}, and finally @code{u} is initialized re-enabling @code{Cleanup}
management. Extreme care, must be taken to avoid suspending Cleanup management
for the rest of the program. Either a @code{UnfreezeCleanup} object must be 
created or the @code{Cleanup::enable()} function must be called when 
@code{Cleanup} management is to be resumed.

If the methods outlined above are not followed when applicable, insidious
bugs can result. A common symptom of these bugs is multiple deletion of
objects, i.e. once by @code{Cleanup} and again by the the destructor of
a class which survived the exception. 


@chapter Implementation

This section briefly discuses the implementation of the @sc{aips++} exception
handling system. The basic underlying system is based on the design discussed
in a paper by William Miller from the 1988 Usenix Conference 
@footnote{W. Miller, "Exception Handling Without Language Extensions", 1988 
Usenix C++ Conference Proceedings}. In addition, an interface is built on top
of this exception handling mechanism which is compliant with ARM style 
exception handling mechanism described in the previous section. 

@section Supporting System

The underlying system supports both resumptive @footnote{Here @emph{resumptive}
implies the ability to continue from the point where the exception was thrown,
rather than continuing from the point where the exception was caught.}, and 
non-resumptive exceptions. The semantics of this system are that exception
handlers are @emph{installed} at various points, and these handlers can
process exceptions which occur in their block scope. These handlers when
presented with an error can:
@itemize @bullet
@item
(abort) -- handle the exception and continue with the block where the 
exception handler was installed (ARM style)
@item
(retry) -- handle the exception, correct the error, continue from the point
where the exception was thrown.
@item
(abdicate) -- handle the exception if necessary, and then allow it to 
propagate to other handlers (ARM's @code{rethrow()}).
@end itemize
@noindent
This mechanism extends the ARM proposal by the ability to continue from 
the point where the exception occurred.

All of the context switches which take place are performed using @emph{setjmp}
and @code{longjmp}. These standard C functions allow for saving and restoring
the call stack and registers @footnote{Floating point registers are not
typically saved.}. 

The object deletions are managed by maintaining two stacks. The first stack
contains all of the installed exception handlers; pushed on as they were 
created. The second stack contains all of the @code{Cleanup} objects which 
are created, including the exception handlers. Each exception handler is 
given the chance to handle the exception, until a handler chooses to 
@emph{abort} or @emph{retry}. If a handler chooses to abort, objects are
popped from the stack of @code{Cleanup} objects and the objects deleted 
until the handler which threw the exception is encountered. At this point, 
@code{longjmp()} returns control to the point where the handler was 
installed. This is the process which takes place to service ARM style 
exceptions.

@section ARM Interface

The ARM interface is a thin layer atop the exceptions described previously.
Much use is made of the standard @emph{cpp} @code{#define}, to implement
the @code{catch} and {try} blocks. Beyond this, it is mainly bookkeeping.
The important pieces of information which are maintained are:
@itemize @bullet
@item
The @emph{thrown} exception.
@item
Which @code{catch} blocks have been executed. This is important for a
@code{rethrow()}. The @emph{cpp} standard macros @code{__FILE__} and
@code{__LINE__} are useful here.
@item
The exception which was last thrown, again for @code{rethrow()}.
@item
An indicator to signal if an exception is @emph{uncaught} to allow exit.
@item
The file and line where the exception was thrown for a descriptive error
message when an exception goes @emph{uncaught}.
@item
The @emph{true} type of the uncaught exception, obtained via RTTI
@item
An indicator to signal if an exception has been rethrown to allow special
processing in the exception handler.
@end itemize
@noindent
This is most of the information which is maintained to provide an
ARM compatible exception interface with descriptive error messages when
an exception goes unhandled. The following is a typical error message:
@example
Uncaught Exception(aips_MinorError_):
    File           - test.C
    Line           - 44
    Throwing Class - trying
@end example
@noindent
All of this information is collected ``automatically'' through the use
of preprocessor macros. The @emph{Throwing Class} information is collected
via an extra RTTI member function, @code{aips_typeName__()}, which was
added by the RTTI expander for use by the exception mechanism.

@bye




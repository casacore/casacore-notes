\documentclass{article}
\setlength{\textwidth}{6.5in}
\setlength{\evensidemargin}{0.0in}
\setlength{\oddsidemargin}{0.0in}
\parskip=5truept
\newcommand{\aipspp}{AIPS++\ }
\newcommand{\nc}{$N_c$}
\newcommand{\nr}{$N_r$}
\newcommand{\nf}{$N_f$}
\newcommand{\nfs}{$N_f^*$}
\newcommand{\nl}{$N_l$}
\newcommand{\ncat}{$N_{cat}$}
\newcommand{\defline}[1]{\cline{1-5}
\multicolumn{5}{|l|}{#1} \\
\cline{1-5}}

\begin{document}

\title{MeasurementSet access in \aipspp}
\author{Athol Kemball}
\date{October 15, 2000}
\maketitle

\tableofcontents 

\section{Introduction}

The C++ MeasurementSet (MS) access classes are fundamental to the
\aipspp library, and find general use in several areas, including data
fillers, the {\tt ms} tool and a range of data reduction
applications. This note is focused primarily on basic MS access in
synthesis at this time; it describes the design of the current
classes, and considers their future extension and consolidation. The
MS data format is described in \aipspp Note 229.

\section{Requirements for the MS access classes}

MeasurementSets are \aipspp {\tt Table}s and their existing access
classes are built closely on the {\tt Table} infrastructure. This
assumption is implicit in the requirements listed in this section.
The C++ classes used for MS access need to meet the following
requirements, or provide the following services:

\begin{enumerate}

\item{{\bf Basic whole MS operations:} MS creation, deletion and
related MS-level operations.}

\item{{\bf Column and row access:} Access to MS MAIN and sub-table
rows and columns.}

\item{{\bf Sorting and selection:} The ability to support bulk sorting
and selection operations. MS selections are expected to be expressed
in a close variant of the Table Query Language (TaQL), defined
elsewhere.}

\item{{\bf MAIN MS iteration:} Sequential iteration through the MAIN
MS table on arbitrary iteration indices, with optional retrieval of
associated MS sub-table data matching the current MAIN table iteration
interval. Indexed access to the MAIN table, on limited key indices, is
a secondary requirement.  MAIN table iteration includes simultaneous
or sequential iteration through multiple MS considered as a
set. Iteration is also required within MS MAIN rows, in frequency,
velocity or polarization.}

\item{{\bf MS sub-table iteration:} Independent sequential iteration
through individual MS sub-tables, on arbitrary iteration
indices. Keyed access to MS sub-tables in read-write mode, on
arbitrary key indices. Iteration is also required within rows, in
frequency, velocity or polarization, as appropriate for individual
sub-tables.}

\item{{\bf MS derived quantities:} Computation or retrieval of derived
MS quantities, which require data access across the MS as a
whole. Examples include elevation computation, assembling higher-level
coordinate information or retrieval of Doppler shift parameters.}

\item{{\bf MS data ranges:} Determination of the data ranges in a
given MS, for any MAIN or sub-table columns or derived quantities.}

\item{{\bf MS data objects:} Provision of C++ classes to model a data
cube containing part or all of the current iteration or selection,
which can be operated upon by other agent classes (e.g. calibration),
and passed between \aipspp classes and between C++ and Glish.}

\item{{\bf Connection to Glish:} Versatile access to the C++ MS access
classes from Glish.}

\item{{\bf Scratch column management:} Creation and deletion of
scratch columns which may be added to, or removed from the MS during
reduction.}

\item{{\bf Parallel I/O support:} Full integration of parallel I/O
capabilities within the standard serial MS access classes, and the
ability to optionally enable the parallel I/O capabilities.}

\item{{\bf {\tt Table} infrastructure use:} Full re-use of all {\tt
Table} system infrastructure and design philosophy wherever possible
in the MS access classes.}

\item{{\bf Efficiency:} I/O is a critical part of astronomical data
reduction performance, and efficiency is a key requirement for MS
access.  This includes integrated I/O profiling, in both the serial
and parallel case.}

\end{enumerate}

\section{Current capabilities and design}

The following capabilities are currently provided:

\begin{enumerate}

\item{{\bf Basic whole MS operations:} The basic classes for creating a MS
or MS sub-table are: {\tt MeasurementSet, MSAntenna,
MSDataDescription, MSDoppler, MSFeed, MSField, MSFlagCmd,
MSFreqOffset, MSHistory, MSObservation, MSPointing, MSPolarization,
MSProcessor, MSSource, MSSpectralWindow, MSState, MSSysCal}, and
{\tt MSWeather}. The {\tt MSTable} class is a templated base class for the
MS MAIN and sub-tables.}

\item{{\bf Column and row access:} The table column accessors are
provided by {\tt MS*Columns}, and the table column definitions are
defined in {\tt MS*Enums}. {\tt MSColumns} provides access to the MS
as a whole. {\it Missing: no specialized MS row-based access.}}

\item{{\bf Sorting and selection:} MS sorting and selection is
possible using the TaQL capabilities directly. Sorting and selection
are also performed by {\tt MSSelector}, to some degree in {\tt
MSIter}, and in specialized form by reduction classes such as {\tt
imager} and {\tt calibrater}, amongst others.  {\it Missing: i)
unified MS selection to TaQL converter (partially implemented in {\tt
[calibrater|imager].g}) allowing aliases, sub-table lookup, derived
quantities and [0,1] indexing; ii) centralization of MS selection
services in a utility class; and, iii) unification of {\tt MSSelector}
GlishRecord selection syntax and a general MS selection syntax,
including unification of {\tt MSSelector} keywords and {\tt
MSCalEnums}}.

\item{{\bf MAIN MS iteration:} Sequential iteration on limited indices
is provided by {\tt MSIter} and {\tt VisibilityIterator}, using {\tt
TableIterator}. This includes velocity or frequency iteration within a
row, and iteration over rows with the same time stamp within an
iteration interval. Sequential iteration through multiple
MeasurementSets is supported. Higher-level access to {\tt MSIter} is
provided by {\tt MSSelector}. {\it Missing: i) arbitrary iteration
indices; ii) more control over velocity iteration including
multi-source support; iii) access to general MS selection; iv)
simultaneous, multi-MS iteration; v) retrieval of MS sub-table rows
associated with the current MAIN iteration block; vi) write access to
more columns; vii) customized sub-iteration within a MAIN iteration
block; and viii) indexed MAIN access.}}

\item{{\bf MS sub-table iteration:} Read-only, indexed access is
possible in certain forms using the {\tt MS*Index} classes, which are
built on top of {\tt ColumnsIndex}. {\it Missing: i) arbitrary,
read-write keyed lookup, with different forms of interpolation where
required; and, ii) specialized sequential iterators.}}

\item{{\bf  MS  derived  quantities:}  Currently provided  by  several
classes,  including {\tt  MSDerivedValues},  and {\tt  MSDopplerUtil},
amongst others. {\it Missing: other computed quantities as needed.}}

\item{{\bf MS data ranges:} Currently performed by {\tt MSRange}. {\it
Missing: C++ interface which does not use GlishRecords.}}

\item{{\bf MS data objects:} Currently provided by {\tt VisBuffer},
but specialized forms also implemented in {\tt MSFlagger}. {\it
Missing: i) greater MS coverage; ii) optional write-through to
underlying MS; iii) customized frequency averaging; and, iv) re-select
on buffer using standard MS selection syntax.}}

\item{{\bf Connection to Glish:} Currently provided by the {\tt ms}
tool, using {\tt MSSelector, MSSelUtil[2], MSRange, and MSFlagger}
primarily. {\it Missing: i) greater unification with {\tt
VisibilityIterator} and {\tt VisBuffer}; ii) duplicates some MS
utility functions implemented elsewhere (e.g. time, frequency
averaging).}}

\item{{\bf Scratch column management:} {\tt VisSet} currently handles
creation and addition of the MAIN columns: MODEL\_DATA,
CORRECTED\_DATA and IMAGING\_WEIGHT.}

\item{{\bf Parallel I/O support:} Prototype parallel I/O capabilities
exist in {\tt pimager::tryparread}. {\it Missing: full parallel I/O
implementation.}}

\item{{\bf {\tt Table} infrastructure use:} It is believed that no
infrastructure is implemented in the current MS access classes which
should properly be moved to the {\tt Table} system. {\it Missing: i)
large file support in the {\tt Table} system; and, ii) ability to
remove existing columns held in TSM}}

\item{{\bf Efficiency:} I/O profiling curently is implemented using
PABLO (UIUC). {\it Missing: continued profiling of computational and
I/O components.}}
}
\end{enumerate}

\section{Proposed revisions}

This section considers short-term revisions to the existing MS access
classes to rationalize certain existing capabilities, and to add
missing capabilities required for application development in several
areas in the short term.

\begin{enumerate}

\item{{\bf Consolidate Glish access layer:} At present, methods to
pack output MS data into GlishRecords, and to unpack and accept input
data and selections in GlishRecord format, exist in {\tt MSFlagger,
MSRange} and {\tt MSSelector}. These classes do not use {\tt
VisibilityIterator} or {\tt VisBuffer}, but use buffers of
GlishRecords to hold the data where required in C++. The proposal in
this area is to isolate the GlishRecord interface code in a separate
class called {\tt MSGlishData} (or similar), and to migrate to the use
of {\tt VisibilityIterator} and {\tt VisBuffer} in the classes
mentioned above. This will allow consolidation of code existing
elsewhere for data averaging in time and frequency. The Glish
interface class will also be responsible for translating between a
{\tt VisBuffer} and a Glish data object, which will remain in
GlishRecord representation.}

\item{{\bf Selection:} The proposal in this area is to concentrate MS
selection and sorting only in {\tt MSSelector}, including: a) add MS
selection to TaQL converter (currently in Glish); b) form union
MSCalEnums and MSSelectionKeywords; c) add sorting (col. names); d)
use new MSSelector in MSIter, imager and calibrater}.

\item{{\bf MSIter, VisibilityIterator, and VisBuffer:} The major
changes to these classes include addition of access to selection, and
sub-table look-up. Specifically: a) add general selection to
constructor, which uses new MSSelector; b) add sub-table lookup for
current MAIN iterator interval, and propagate these changes to VisIter
and VisBuffer.}

\end{enumerate}

\end{document}



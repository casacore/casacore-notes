%% helpProposal.latex
%% $Id$

\documentstyle[10pt] {article}
\setlength{\textwidth}{6.5in}
\setlength{\evensidemargin}{0.0in}
\setlength{\oddsidemargin}{0.0in}

%%---------------------------------------------------------------------------
\begin{document}
\title{NOTE 187\\
       A Help Protocol for AIPS++ (Draft 3)}
\author {Paul Shannon, NRAO}
\date {January 30, 1996}
\maketitle
%%---------------------------------------------------------------------------
%\parskip=10truept

\section*{Introduction} 

This paper proposes a simple protocol for storing and retrieving help
information in AIPS++.  The proposal extends to all AIPS++ ``software
entities'':  glish functions,  glish clients written in C++, and
distributed objects.  These questions are addressed:

\begin {enumerate}
\item What minimum help information should be provided by every software 
      entity?
\item How will that information be stored? How will it be retrieved?
\item What options will be available for viewing the information?
\item How will the user navigate through thousands of different
      help topics?
\item Some entities may benefit from carefully qualified, 
      lengthy explanations, and elaborate demonstrations. 
      How will the help protocol support this?
%%\item Parameter editing is closely related to help information.  What
%%      implications does the proposed help protocol have for 
%%      setting and editing parameters?
%%\item What needs to be done in order to implement this system -- or a 
%%      similar one?  What is an attainable schedule for doing so?
\end {enumerate}


The original design and implementation of standardized help for glish
functions came from Rick Fisher.  Though he is in no way responsible
for subsequent modifications (and drift!), the author is grateful
for the insightful suggestions that got this effort started.

%%----------------------------------------------------------------------------
\section*{Overview:  Self-Description and Atoms}
The core of the proposal is the notion that every software entity
should be self-describing, and that there are a small number of {\it
atoms} of help information which any entity should return on demand.

We use the word ``atom'' because these items of help information are 
fundamental and irreducible in their domain, and can be assembled into
more complex structures.  For each atom there is a corresponding
retrieval mechanism, which will often be a simple glish function call
typed at the command line, or invoked by a GUI help viewer.

The software entities divide naturally into two groups -- objects and
functions -- and each group has characteristic help atoms.
Distributed objects, glish clients and (eventually) glish objects are
in the first group; glish functions, client functions, and object
member functions are in the second group.  Here is a tenative list of
the help atoms  {\it shared} by both groups:

\begin{enumerate}
  \item category
  \item version
  \item name string
  \item apropos keywords
  \item short description
  \item long description
  \item caveats
  \item see also
  \item example code
  \item example code comments
\end{enumerate}

These additional atoms are required for functions:

\begin{enumerate}
  \item return value
  \item parameter n
  \item parameter n author's default
  \item parameter n current default
  \item parameter n comment
  \item parameter n min
  \item parameter n max
  \item parameter n legal values
\end{enumerate}

And this atom is specific to objects:
\begin{enumerate}
  \item member functions
\end{enumerate}

%%----------------------------------------------------------------------------
\section*{Design Principles}
The design of the help system is based on a couple of aphorisms:
\begin{itemize}
   \item Low threshold, high ceiling.
   \item Mechanism, not policy.
\end{itemize}

``Low threshold'' here means that the protocol should be easy to
comprehend and uncomplicated to use -- both for the author of help
text, and for the reader of help text.  We want every code author to
provide adequate help information for their code.  To that end, we
must select a minimum but sufficient list of help categories; if the
list is a sensible one, and if using it is straightforward, then we
can reasonably ask code authors to adopt it.

On the opposite end of the help system, where help the user is looking
for help, a minimum but sufficient list of help categories
can be easily learned, easily remembered, and easily invoked. 

``High ceiling'' means that we must allow for the creation and
display of very sophisticated and nuanced help information.  The mechanism
for this is straightforward: two of the atoms (``long description'' and
``see also'') are plausible places for the author to embed WWW URL's;
any of the help viewers we develop can easily be designed to recognize
a URL, and to run a WWW browser.\footnote{A particular viewer may also choose
to ignore any URL's -- and since the fundamental information is not
stored in URL's or HTML markup, this choice is quite defensible.}
This hook provides access to an open-ended set of help tools (imagine
a Java applet that uses animation to demonstrate the algorithms of a
clean task), but does so without forcing any other costs upon the
code author who is not so inclined, or whose code needs only simple
explanation.

The protocol does not assume any particular mode of viewing.
(This contrasts with AIPS++ class documentation system, which requires
either a web browser, or a patient reader of heavily marked-up text.)
Three quite different help viewers were developed just prior to the
writing of this paper  -- see the section below titled {\bf Help
Viewers}.

Another important sense in which the protocol is ``mechanism, not policy''
is that it tries to identify the fundamental categories of information
one needs to know about a software entity, and once identified, keeps
the categories separate.  One might argue that the typical user most
often wants to know these things about (say) a glish function:

\begin {enumerate}
\item The short description
\item Basic parameter information
\item Function return type
\end {enumerate}

If you accept this, it may seem plausible for the
help protocol to provide a single operation which returns these
pieces of information together -- or any other packaging of the information 
that will be requested frequently.  But the protocol intentionally
avoids this:  the emphasis is, instead, upon identifying the fundamental
atoms of information, and supporting them.  Any particular grouping of the
atoms is a policy decision, and should be handled at a higher level
that what we address here.
%%----------------------------------------------------------------------------
\section*{Where Does Help Text Go?  An Argument for Collocation}
There is nothing which can guarantee that code authors will update their
help information when they update their code.  But if the two kinds of
information are stored separately, the likelihood of consistent updating
is probably reduced.  The protocol therefore includes the recommendation
that help text be stored in the same file as the glish function, C++
glish client, or distributed object it describes.
%%----------------------------------------------------------------------------
\section*{Navigating through ``Too Much'' Help }
Two of the proposed help atoms, ``category'' and ``apropos keywords'' are
designed as navigation aids.  The first of these allows the user to
restrict the scope of a search to one or more categories:  mathematics,
image processing, or plotting, for example.  The second allows the 
function author to list all of the ideas or keywords that could be
associated with their function.  For example, at the Glish command line:

\begin{verbatim}
   set_help_category ('fitting', 'plotting');
   apropos ('vector')
\end{verbatim}
or
\begin{verbatim}
   set_help_category ('storage');
   apropos ('vector')
\end{verbatim}

would produce a very different set of functions for further exploration.
%%----------------------------------------------------------------------------
\section*{Help Viewers}
Three viewers were quickly assembled as part of the exploratory work 
behind this paper, and a handful of glish functions (see {\em Example}
section just below) were documented in the proposed form.  These viewers were:

\begin {enumerate}
\item Text-only access: this is simply a set of standard glish functions
      which cause the appropriate text to be written to stdout when called
      from the glish command line.

\item Web browser access:  a combination of glish and perl scripts
      extract the text information (using the same function calls as the
      text-only browser), and translates them into HTML.

\item Dedicated Glish/Tk browser: like the web browser, but the text is
      sent to a Glish/Tk client for (arguably) easier viewing.
\end {enumerate}

There will be a need very soon for a fourth ``viewer'', one which creates
static HTML or postscript from the glish, C++, or other source code, so
that help may be obtained without actually running the code in which it
is embedded.  This is a job of at least moderate complexity, somewhat 
similar to ``cxx2html'', the AIPS++ documentation extractor.
%%----------------------------------------------------------------------------
\section*{Example: Help for a Glish Function}
``fitPoly'' is one of the first glish functions written for the GBT integration
tests in 1995.  The original help for this function consisted of simple
glish print statements hard-coded into a glish function called ``helpFitPoly'':

\begin{verbatim}
  print "fitPoly (x, y, order), linear least-squares fit of a polynomial of"
  print "the specified <order> to the x and y vectors";
  print "returns a vector of length <order>, containing the coefficients of"
  print "the fitted polynomial"
\end{verbatim}

In the proposed scheme, the author of fitPoly reads in a bit of
boilerplate text to the glish source code, and then edits it, adding
the function name, and all of the relevant explanations.  This allows
simple glish functions (which would become standard parts of the the
standard file ``help.g'') to extract the information from the glish
source.  (In this example, and to keep things relatively simple, help
information for parameters is not shown.)  Here is the boilerplate:

\begin{verbatim}
  ::category := '';
  ::nameString := '';
  ::help.aproposKeywords := '';
  ::help.shortDescription := '';
  ::help.longDescription := '';
  ::help.returnValue := '';
  ::help.caveats := '';
  ::help.seeAlso := 
  ::help.example := [=];
  ::help.example.code :=  '';
  ::help.example.comments := ''
\end{verbatim}

which when edited, looks like this:

\begin{verbatim}
  fitPoly::category := 'fitting';
  
  fitPoly::nameString := 'fitPoly';
  fitPoly::help.aproposKeywords := 'fit fitting polynomial linear least \
   squares llsq vector order';
  
  fitPoly::help.shortDescription := 
  'fitPoly (x, y, order): fit polynomial of specified order to x-y data';
  
  fitPoly::help.longDescription :=
  'fitPoly (x, y, order): fit polynomial of specified order to x-y data. \
  This function performs a linear least-squares fit of a polynomial of \
  the specified <order> to the <x> and <y> vectors.  It returns a vector of \
  length <order>, containing the coefficients of the fitted polynomial.';
  
  fitPoly::help.returnValue := 
  'a vector of floating-point numbers: a, b, c, d... which are the constant \
  terms in the expression   a + bx + cx^2 + dx^3 + ...';
  
  fitPoly::help.caveats :=
  'At present (Autumn, 1995), this function will return meaningless values if \
  called with x or y vectors that contain numbers whose magnitude swamps their \
  differences.  This is because the C++ polynomial fitting client uses a class \
  which employs single precision floating point numbers, not doubles or \
  complex. This will be remedied in the near future... In the meantime, here \
  is a way to work around the problem: \
  <show glish code that normalizes x and y before fitting, and then.\
  un-normalizes them afterwards.>';
  
  fitPoly::help.seeAlso := 
  'glish client: $AIPSPATH/code/trial/apps/gfitpoly/gfitpoly.cc \n\
   AIPS++ library class: \
  http://baboon.cv.nrao.edu/aips%2b%2b/docs/trial/implement/Fitting.html';
  
  fitPoly::help.example := [=];
  fitPoly::help.example.code :=  '\
    x := array (1:10,10)                       # 1\n\
    y := 2 + (3 * x) + (4 * x * x * x);        # 2\n\
    coefficients := fitPoly (x,y,2);           # 3\n\
    fittedValues := evalPoly (x,coefficients); # 4\n\
    plotxy (x, y, "original curve");           # 5\n\
    plotxy (x, fittedValues, "fitted curve")   # 6';
  
  fitPoly::help.example.comments := '\
  This code fragment shows how to fit a second order polynomial to some data \n\
  calculated with a cubic function -- so the fit will be imperfect.\n\
    line 1:  create an array of 10 elements, initialized to 1-10\n\
    line 2:  create y as a function of x\n\
    line 3:  get the three coefficents of the fitted, second-order polynomial\n\
    line 4:  evaluate those coefficients at each of the original x values\n\
    line 5:  plot the original function\n\
    line 6:  plot the fitted curve';
  
\end{verbatim}

There is no doubt that the composition, typing, and proofreading of
this help text is a great deal of work.  The virtue of the proposed
approach is that it adds as little as possible to this work: there is
no markup and formatting\footnote{Strictly speaking, there are two
syntactic conventions the function author must understand: the glish
line continuation character (the backslash) and the glish newline
token (backslash n).  It may be that the first of these can be
eliminated in time.}  to learn (and to get wrong...).  There is simply
a small and  comprehensible set of variables to assign.

With these function attribute definitions in place, the glish user may
type, for example, 

\begin{verbatim}
   return_value (fitPoly)
\end{verbatim}

and will get an appropriate\footnote{``appropriate'' will depend on the 
viewer.  See the {\bf Help Viewers} section for an explanation.}
display of this text:

\begin{verbatim}
  a vector of floating-point numbers: a, b, c, d... which are the constant
  terms in the expression   a + bx + cx^2 + dx^3 + ...;
\end{verbatim}

For each of the fields in the help attribute attached to a glish
function (these fields include {\it category, nameString,
aproposKeywords, shortDescription, longDescription, returnValue,
caveats, seeAlso, example.code, example.comment,} and several fields
for each function parameter) there is a companion function for
retrieving the information.  These fields, and these companion
functions, all have long, descriptive names; the reader should keep in
mind that it is straightforward to selectively compose a particular
combination of these fields (perhaps all of them at once), and to
retrieve them with a simple, short command.  In a GUI, of course, no
names need be typed at all.
%%----------------------------------------------------------------------------
\section*{Implementing Help for Distributed Objects, C++ Clients, and OO Glish}
Once the protocol for help is agreed to -- possibly including some modification
of the {\it atoms} mentioned above --
this same protocol can be applied to other software entities.  For
example, we could sensibly decree that glish clients written for AIPS++ respond
to a standard set of help events.\footnote{There
might be a single``help'' event, with a variety of values, or there could be
an event for each atom in the protocol.}  The same would apply
to AIPS++ distributed objects: it looks now like there will be a fundamental 
base class for tasking, and this base class is the natural place to 
include a standard help method or methods.  In the same spirit, when
Glish gets objects, it will be easy to translate the current functional
approach to object methods.
%%----------------------------------------------------------------------------
%%\section*{Parameters}
%%
%%Specifying function parameters\footnote{The object-oriented
%%programming analog to this is ``setting state variables''.} is a large
%%part of the effort required of the user in running data analysis
%%software.  We want to make this complicated task as easy as possible
%%-- one way to do this is to establish reasonable defaults for every
%%(of for most) function arguments, and allow the user to selectively
%%supply only those arguments which are different from the defaults.  We
%%also wish to provide a means for the user to assign their own default
%%value to an argument, or to object state variables, for the duration
%%of their analysis session.  (This distinction is between the default
%%value that the code author provides, which should be plausible for 
%%most cirucumstances, and a default value specified by the user, which
%%is appropriate for very specific analyses.)
%%
%%Though these issues may seem somewhat far afield from the main topic
%%of this paper, their relation to help emerges when we consider other
%%aspects of function parameters: any truly useful help information will
%%describe each parameter, display default values, specify units for the
%%values, lay out the range of values, and warn of special
%%cases and possible boundary conditions to be mindful of.  In assigning
%%a new ``user's session-default'', or when a value is passed as part of
%%a function call, we may want to use the range information to
%%check the reasonableness of the assignment.
%%
%%The author admits to some confusion about how best to supply the convenience
%%which was part of Rick Fisher's initial scheme for changing parameter
%%defaults.  In that scheme, every glish function (i.e., 'Track') had a
%%companion global record variable ('track') which had a separate field
%%for each parameter.  The glish user could then assign values directly and
%%conveniently:
%%
%%
%%\begin{verbatim}
%%  track.scanLen := 10.0;
%%\end{verbatim}
%%
%%which would be in force whenever ``Track'' was called without a specific
%%override to that parameter.  The convenience of this approach is 
%%counter-balanced, perhaps, by the lack of encapsulation.  One not altogether
%%pleasing alternative would look like this at the glish command line:
%%
%%\begin{verbatim}
%%  set\_param (Track, 'scanLen', 10.0);
%%\end{verbatim}
%%
%%In a GUI parameter editor, of course, this would be more convenient to use,
%%but there will always be a need for scripts, and bulk parameter assignment 
%%within scripts.  It will be important to find a good compromise between
%%encapsulation and convenience.
%%%%----------------------------------------------------------------------------
%%\section*{Parameter Editor}
%%All parameter (or state variable) manipulation must be available from the
%%glish command line.  But the current proposal provides all of the hooks 
%%which would be needed to write a very nice graphical editor which, for
%%example, would 
%%
%%\begin{itemize}
%%  \item Provide a display of the default value, and the legal range, of
%%        any parameter.
%%  \item Display help on demand, including hyper-links to other documenation.
%%        This will offer the same features as the help system itself.
%%  \item Check newly entered values against the legal values when possible.
%%  \item Allows the user to save parameter settings by name, for later
%%        retrieval.  (The user should be able to save comments and notes
%%        about these settings.)
%%\end{itemize}
%%%%----------------------------------------------------------------------------
\end{document} 

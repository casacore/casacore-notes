\input epsf.tex        % For including postscript figures
\input texinfo          @c -*-texinfo-*-

@c The Real History:
@c  march-92 initial writeup for prototype report 		PJT
@c  june-92  converted to texinfo, to include in project book,
@c           extended with lots of working examples             PJT
@c  Feb-93   Complete revision with encapsulated post-script diagrams
@c           and more examples.                                 TPPR

@c %**start of header
@setfilename 153.info
@settitle User Interface
@c %**end of header

@titlepage
@title User Interface Tutorial
@subtitle How to use the Input class and interface with Khoros
@author Peter Teuben and Timothy P. P. Roberts
@vskip 0pt plus 1fill
Copyright @copyright{} 1992 AIPS++
Last modified $Id$
@c The above line is maintained by RCS - do not modify it.
@sc{aips++}
@end titlepage

@c ======================================================================

@menu
* intro::		Introduction
* parameters::  	Parameters: keyword=value
* implementation::	main(argc, argv)
* khoros::		Sample khoros interface and demos
* conclusion::		Parting thoughts
@end menu

@c ======================================================================
@node intro, parameters, Top, Top
@chapter Introduction

During the prototype stage a basic command line user interface was
developed. This attempt at easing the trouble of passing information to an
executable program resulted in a set of 
C++ classes called @code{Param} and @code{Input}.
The programmer may simply include the @code{Input} class into their
code and have immediate Command Line User Interface (CLUI) capabilities. 
The programmer's @sc{aips++} application is run from the unix level prompt 
by invoking its name and
listing linearly on the same command line the @code{keyword=values} or
@code{-keyword values} associated with proper execution. 
The @code{Input} and @code{Param} classes will successfully 
parse the command line into
the executable program and check for appropriateness.  

The
CLUI capabilities are further extended to a Graphical User Interface
through the use of the Khoros Cantata environment. The user starts up
Cantata from the unix prompt and, by utilizing a series of pull down
windows, invisibly creates an X-based window for visual display of all 
parameters associated with the @sc{aips++} application's need for external
input.  

As more @sc{aips++} applications develop, the Canata environment will allow
the user to connect the output of programs to the input of other
programs.  The connections between applications are formed by simple
pointing and clicking.  The entire workspace may then be saved to a file
where default values are stored.  By clicking on the @strong{run} button
the chosen chain of applications is executed under the parameters
previously saved.

Finally, the more sophisticated programmer may utilize the Khoros Preview
environment to invent more creative windows for their application.
Sub-window dependence, thorough help windows, and more esthetically
pleasing lay-out are all possible.  All windows will hook seamlessly
onto the @code{Input} and @code{Param} CLUI written by the programmer.  

This document contains working examples, as well as hypothetical
examples to get a discussion going on future extensions.
These latter ones will be clearly marked as such.

Some time has also been spend in showing that both an AIPS
interpreter and a Graphical User Interface (GUI) can be plug-in
compatible user interfaces.  For example, a functional GUI for
Khoros@footnote{(c) University of New Mexico} is available for demo
purposes.  An AIPS shell interpreter can be thought of in terms of the
MIRIAD shell interpreter. 

The @code{Input} and @code{Param} classes and their associated user
interfaces should be viewed as @sc{aips++} development tools only.  The
limitations imposed by the current Khoros GUI techniques dictate the need for
a more flexible system.  It is believed that as the C++ environment
matures an obvious candidate for the final @sc{aips++} Graphic User Interface
will emerge.  Until that time, the methods outlined here will,
hopefully, reduce the programmer's worry list.

@ifinfo
This texinfo file has been compiled on @today{}.
@end ifinfo



@c ======================================================================
@node parameters, main, intro, Top
@chapter Parameters

@menu
* program keywords::        Program Keywords
* system keywords::         System Keywords
@end menu

@node program keywords, parameters
@section Program Keywords

The basic command line user interface is an ordered series of
@code{keyword=value} pairs, which we call @strong{parameters}
@c @footnote{The names @strong{parameter} and @strong{keyword} may correctly be used to refer to each other}. 

The @code{class Param} (see @code{Param.h}) implements one single such
@strong{parameter}.  Values may be Int, Block<Int>, double,
Block<double>, Bool, or Strings.  In addition to a name and a
value, a @code{Param} parameter has
a variety of other attributes, such as a one-line help string (useful
when being prompted for input or with hypertext identifiers, etc...), a type, 
a range and optional units.  All of
these attributes are character strings; 
parsing and error checking is done at a
different (hidden) level.  The programmer, however, will never interact with a
parameter through it's @code{Param} class interface.  Interaction is done 
with the
@code{class Input}, which is a container of @code{Param}'s,
with a variety of user interface attributes (help-level,
debug-level, etc...). 

Although the programmer must supply the user interface with a number of
predefined @strong{program parameters}, the user interface itself will
create a small number of @strong{system parameters} (help=, debug=).  The
purpose of these is to tell the task how to communicate with the user
and it's environment, and give the user control over these items.  For
example, the user may want to see 
(debug) messages above a certain threshold level.  The programmer simply 
adds debug levels to their code and allows the user to specify how deeply
they wish the debugging to progress.

For the benefit of the Programmer, the user interface also defines a
number of standard parameters (``templates''), which can be copied and
bound to a program parameter.  This predefined group of parameters
(shown below) will allow the novice programmer to skip even the process
of parameter creation if the application's interface needs are meet by
the standard templates.

@smallexample
    std.Create("infile",   "",            "Input file");
    std.Create("outfile",  "",            "Output file");
    std.Create("lstyle",   "solid",       "Line style for current object");
    std.Create("lwidth",   "thin",        "Line thickness");
    std.Create("xyzselect","",            "Image Region of Interest");
    std.Create("uvwselect","",            "Visibility selection of Yegs");
    std.Create("font",     "Helvetica12", "Font selection");
    std.Create("device",   "",            "Graphics device");
@end smallexample

The advanced programmer may ignore these definitions altogether and
create their own parameters meeting the exact needs of their
application.  Most programs are probably happy with a simple set of parameters,
like a linear list.

All input as well as output should be controlled by the user interface. The
Astronomer has a varying degree of control over how and where
input and output occurs. In the command line interface
system control occurs through a small number of system parameters
on the command line. In a GUI there will be a different
mechanism visible to the user to do this, but control to the task
always occurs through a set of system keywords.

For example, a interactive UNIX shell session may look like:

@example
    1% MyProgram key1=val1 key3=val3
    2% MyProgram key1=val1 key2=val3 debug=5
    3% MyProgram help=prompt
    4% MyProgram help=pane > prog.pane
@end example

In command @code{1%} the user has set several parameters for the program 
MyProgram to applicable
values.  The @code{2%} command line invokes the executable and sets the
level of displayed debugging to the programmer specified 5th level.
Command @code{3%}: the
user is prompted, and parameter default values are restored.
Command
@code{4%} gives an example of the self-describing mode of programs,
where a pane description file for Khoros has been constructed. 
(@xref{khoros}). The latter is the first step toward building a Khoros
Graphic User Interface.

@node system keywords, parameters
@section System Keywords

Next to @strong{program parameters} there exists a set of
@strong{system parameters}, which form the control between the 
program and upper level user interfaces.

The system keywords are:

@table @code

@item help
Various options can be given here, some of them may have obvious
conflicting interests.



@table @samp

@item pane
The user interface is the program is described in @code{KHOROS} pane
format.  The output must be redirected to a pane file, and placed in the
appropriate directory for @code{KHOROS} to pick it up.  Program then
exits normally.  (@xref{khoros}).

@item miriad
The user interface is the program is described in @code{miriad} doc
format.  The output must be redirected to a doc file, and placed in the
appropriate directory for @code{miriad} to pick it up.  Program then
exits normally. 

@item prompt
Run-time prompting of keyword values. 

@item debug
It makes sense to have separate levels of output, which may only
be of interest to an @code{aips2usr}, @code{aips2prg} and
@code{aips2mgr}, in increasing complexity. The value of this
keyword is numeric, the larger the number, the more output.
0 would produce next to nothing, 1 more, 2 even more etc. Adding
10 to the number would activate the @code{aips2prg} level,
and adding 100 the @code{aips2mgr} level.


@end table
@end table

@c ======================================================================
@node parameters, member functions, Input
@chapter Input's Class Member Functions

@menu
* Param::                   Param Class
* Input::                   Input Class
* member functions::        Member Functions 
@end menu

@node Param, parameters
@section Param Class

The class @code{Param} is a single element of a linked list of
parameters known collectively as an @code{Input}.  The class Param
@strong{will not be visibly used by the programmer}. The following
itemization is to assist the programmer in understanding @code{Input}'s
utilization of @code{Param}s.  

@smallexample
Param MyParameter(key, value, help, type, range, units);
@end smallexample

@itemize @bullet

@item
A @code{Param} substantiation has six ordered arguments.  The first is a
@code{key}.  The programmer may choose any word as the key as long as no
other predefined system parameter keys are of the same name.  Currently,
the keys "help", "error", "debug" and "sound" are predefined. 

@item
The second argument is the @code{value} for the parameter. Like all
other @code{Param} arguments, the value
is passed by a String type.  Within that limitation, values may be
Integers, Block<Int>, Doubles, Block<double>, Boolean, and String.  

@item
The third argument is the @code{help} string.  This allows prompting of
the user when the CLUI is put in help=prompt mode.  The help argument
also gets used when constructing the Khoros GUI.  The programmer should
not feel the need to be terse when writing the help argument.

@item
The fourth through sixth arguments to @code{Param} are optional.  They  are the
@code{type}, the @code{range}, and the @code{units} of the parameter.
All
will be parsed invisibly and used to throw errors should the value not
meet an obvious restriction imposed by the above.

@end itemize

@node Input, member functions, parameters
@section Input Class

The @code{Input} class is a means for building  a linked list of
parameters and gaining access to them once created.  @code{Input} takes care of
system/environment variables and assigns their values within the
programmer's code.  The linked list of parameters is limited only by the
number of names the programmer can dream up.  The programmer need not
think hard on the order of definition of parameters in Input. The list of
@code{key=values}  given on the command line by the user need
not be in any specific order.  

The definition of parameters is by simply creating an @code{Input} and then
using the appropriate @code{Input} member function.  The programmer always
starts by creating a @code{Version} parameter (for identification of
application programs by revision) and a @code{Usage} parameter (for
identification of the application's correct methodology.) Then the
programmer adds to the list of parameters as necessary.

Since storage is in string form, the
Input member functions may be tricked into returning innovative values if
the "type" argument is not initially coded into the parameter.  The
Input linked list of Params may be "closed" when no further parameters
are needed by the application.  

@node Input, member functions, parameters
@section Input Member Functions
@itemize @bullet

@item
     @code{Input();}

     @code{Input(int);}

     
The use of a integer argument to the constructor for @code{Input} is 
 mandatory. It enables the creation of parameters. 
The @code{Input(0)} constructor is to create a minimal parameter
list without environment variable initialization. The use of
@code{Input()} (default constructor value
= 1) or @code{Input(1)} explicitly 
pre-defines a "standard list" of program parameters. These standard
parameters may or may not be used but they allow the programmer to "skip"
creation of parameters when the application code has trivial need for
user interface. Additionally, @code{Input(1)} initializes any
environment/system variables and
puts the program in no-prompt mode unless environment variable
HELP is defined with value "prompt".
The output debug level is set according to the value of the
environment variable DEBUG.
The maximum number of error messages to be outputed is set according
to the value of the environment variable ERROR.
     
@item
    @code{void Version(String);}

    @code{void Usage(String);}
     
These are the first of the parameters the user defines.  Their use is
mandatory since they set the version and usage string for announcements.
@smallexample
Input myparams(1);
myparams.Version("MyProgram: v1.23 by Me!");
myparams.Usage("MyProgram takes the besmurch of a doo-hickey");
@end smallexample


@item
    @code{void Create(String, String, String);}

    @code{void Create(String, String, String, String);}

    @code{void Create(String, String, String, String, String);}

    @code{void Create(String, String, String, String, String, String);}
     
The @code{Create}
 functions make a new program parameter, either from scratch or looking it
up from an internal list of templates.
The function also checks whether parameters can still be created,
and whether the @code{keyword} is unique for the program.
The @code{value}, @code{help} and remaining arguments are all optional.
@smallexample
String key("infile"), value("/u/myHome/good.data");
String help("The infile is the source of everything beautiful");
myparams.Create(key, value, help);
@end smallexample

@item
     @code{void SysCreate(String, String, String);}

This function is used to create a dedicated @code{system parameter}.  It is
possible to create a system parameter that does not have an equivilent
external environment variable.

@item  
    @code{void Close();}

Disable the creation of parameters. Highly recommended, but
not required.
     
@item
    @code{void ReadArguments(Int argc, char *argv[]);}

This function is used only after an @code{Input} type has been constructed and
the appropriate parameters created.  @code{ReadArguments} reads in the command
line @code{keyword=values} and parses them to the appropriate parameters.

@item     
    @code{double GetDouble(String key);}

    @code{Block<double> GetDoubleArray(String key);}

Get the double value of the parameter (or 0.0 if unknown key).
If the program is in prompt mode, the stdout will ask the user for the value.
@smallexample
double offset = myparams.getdouble(uvw_offset);     
@end smallexample

@item
    @code{int GetInt(String key);}

    @code{Block<Int> GetIntArray(String key);}

Get the Int value of the parameter (or 0 if unknown key).
If the program is in prompt mode, ask the user for the value.
     
@item
    @code{String GetString(String key);}
     
Get the string-type value of the parameter (or "" if unknown key).
If the program is in prompt mode, ask the user for the value.
     
@item
    @code{Bool GetBool(String key);}
     
Get the Bool value of the parameter (or FALSE if unknown key).
If the program is in prompt mode, ask the user for the value.
     
@item
    @code{String GetRC(String name);}
     
Get a resource or global environment variable value, returns empty
string if nothing found. **NOT Currently Implemented**
     
@item
    @code{int Count();}
     
Get the total number of parameters of this program.
     
@item
    @code{Bool Debug(int l);}
     
See if the current debug level is thresholded.
     
@item
@code{Bool Put(String key, String value);}

   @code{Bool Put(String keyval);}
     
Set a new value for an existing named parameter
Returns FALSE if key is an unknown parameter name.
The function can also be called with a single argument of the
form @code{key=value}, where @code{key} is a valid new parameter name, and
where @code{value} may be empty (the `=' is required though). In this 
case a new parameter will be created (provided that creation is 
still allowed).
@smallexample
myparams.Put("uvw_offset=15.0");
@end smallexample     

@item     
    @code{void Announce();}
     
Announce program and version. This may also terminate
execution if certain self-describing features were requested.
     
@item
    @code{Bool More();}
     
If program is interactive, this will halt execution, and
prompt user to continue. If not, it always returns FALSE.
     

@item
    @code{void Exit(int level);}
     
Emergency exit from the user interface, while still saving
the environment as long as level > 0
     
@end itemize

@c ======================================================================
@node main, khoros, parameters, Top
@chapter Implementation of @code{main(int argc, char **argv)}

The programmer uses @code{main(int argc, char **argv)} to initially pass
the command line parameters.  Within main, the use of the member
functions of the @code{Input} class create the appropriate parameters
and pass their values to the internal variables.


We'll finish up by looking at some code:


@c comments on the code:
@c   1. the inputs are not aligned to be able to fit in 80 columns
@c   2. need @ in front of { and } symbols for texinfo

@smallexample

//   the code for this is available in aips++/code/aips/test/xyPlot.C
//   copyrights removed for space and dollar signs removed from RCS Id:
//   keyword to prevent substitution.

#include <aips/aips.h>
#include <aips/Vector.h>
#include <aips/String.h>
#include <aips/Input.h>      // need this if you want it to work
#include <aips/Plot.h>
#include <iostream.h>

01 main(int argc, char *argv[])
02 @{
03    Input inputs(1);
04    // Define our input structure
05    inputs.Version(
06                 "Id: xyPlot.C,v 1.1 1993/01/29 20:45:48 bglenden Exp");
07    inputs.Usage("Plot y vs. x vectors from an AipsIO file");
08    inputs.Create("xyfile", 
09                "/tmp/xy.aipsio",
10                "File which contains xy vectors",
11                "InFile");
12    inputs.Create("overplot", "False", "Multiple plots?", "Bool");
13    inputs.Create("lines", "True", "Plot lines or points?", "Bool");
14    
15    // and Fill them from the command line
16    inputs.ReadArguments(argc, argv);
17
18    try @{
19      const char *filename = inputs.GetString("xyfile");
20      AipsIO xyfile(filename, AipsIO::In);
21      Vector<float> x, y;
22      Plot plot;
23
24      xyfile >> x >> y; // initial vectors
25      plot(x,y,inputs.GetBool("lines"));
26
27      for (;;) @{ // forever
28          xyfile >> x >> y;
29          if (inputs.GetBool("overplot") == True) @{
30              plot(x,y,inputs.GetBool("lines"));
31          @} else @{
32              plot.newPlot();
33              plot(x,y,inputs.GetBool("lines"));
34          @}
35      @}
36  @} catch (AipsIOError x) @{
37       ; // nothing - no more data
38  @} catch (AllocError x) @{
39       cerr << "AllocError : " << x.getMesg() << endl;
40       cerr << "Size is : " << x.size() << endl;
41  @} catch (AipsError x) @{
42       cerr << "aipserror: error " << x.getMesg() << endl;
43       return 1;
44  @} end_try;
45
46    cout << "Any key to exit:\n";
47
48  char ch;
49  cin.get(ch);
50
51  return 0;
52@}

@end smallexample

Let us discuss this program line for line.

01 - This is the method of passing the command line through to the main
body of code.  This obviously makes it mandatory.  The inclusion of the argc, argv is very well discussed in
Stroustrup. @footnote{The C++
Programming Language, page 87}

03 - The instantiation of @code{Input} in the variable @code{inputs(1)}
 is done with
an argument of (1) to indicate the constructor should build @code{inputs}
with a standard set of program parameters and read in values for the
system parameters.  An argument of (0) would build an @code{Input} that was
empty and would obligate the programmer to build the linked list of
@code{Param}s explicitly.

04-05 - The version of the code is stored within the @code{Input}.  Note the
optional use
of RCS keyword substitution@footnote{See the @code{co} man page.}
allows the code to be automatically updated.

06 - The @code{Usage} field assists the user when thrown during an error.

07-11 - The @code{Create}
 member function of @code{Input} builds, in this case, a
parameter called @code{xyfile}, immediately filled with the String containing
the directory that holds the data. The help String is useful for new
users or prompting.  The fourth argument of @code{InFile} is the optional
type of the parameter's value.  Any suitable String may be used.
Missing from this example are the optional fifth and sixth arguments,
the parameter's value's @code{range} and @code{units}, respectively.

12 - This is another instantiation of a @code{Param} inside of 
@code{input}.  This
parameter will be referenced by the @code{keyword "overplot"}. 
 It is initialized
to False and is of type Bool.

13 - This line is the third and final @code{Param} placed in @code{inputs}
 and is
recognized by the code when accessed with @code{keyword "lines"}.

16 - The call of @code{ReadArguments(argc, argv)} should be done after the list
of @code{Param}s has been completed.  This line of code fills the values from the
command line. A @code{keyword} that doesn't match will throw an error.

19 - At this point the local variable @code{filename} is initialized to the
String value held within the parameter accessed through the @code{key
"xyfile"}.  Recall that the value of @code{xyfile} was originally set to 
@code{"/tmp/xy.aipsio"} but would be replaced with the proper value at 
execution.  The @code{GetString} member function returns either the default
value specified during the @code{xyfile} parameter's instantiation or the
value placed into it from the command line use of @code{xyfile=myfile}.

25 - Here the boolean value of the @code{Param} called @code{lines}
 is inserted into
the call to the function @code{plot}.

29 - Again the @code{Input}  interface has its parameter called @code{overplot}
return a boolean to be used as a test for an "if".  The @code{GetBool(key)
Input} member function may be reading the default value of the appropriate
parameter called @code{key} or using the value passed from the command line.

30 & 33 - Another call to @code{plot} that uses the boolean value stored in
the parameter called @code{lines}.



Some comments:

@itemize @bullet

@item
The @strong{program parameters} are defined through the
@code{Create} member function, of which only the first three arguments
are required. Note the order of creating parameters is relevant, to aid
command line shortcuts.
In addition, a @code{Version} and
@code{Usage} string should be supplied to the user interface.  Apart
from the obvious one place where this information should be
stored, they can
also serve as forced execution version control (history files contain
this version id, and utilities may exist that extract an executable script
from this: if the current version and history file version differ,
@code{warning} or @code{error} may be called.

@item
The example above doesn't make use of the ability to reset a parameter
to a value from within the main.  If the programmer wanted a parameter
to have a user inserted value (read from the command line) at certain
parts in the code but reset to a hard-wired value later, he/she could 
use a call to the @code{Input} member function @code{Put(key)}.  A short
example using the variables defined in the example above may be:

@smallexample
for(Int somecounter = 0; somecounter < 5; somecounter++) @{
   if(inputs.GetBool("lines") && (somecounter > 10))
      inputs.Put("lines=False");    // parameter "lines" now is false
   plot(x,y, inputs.GetBool("lines"));
   @}
@end smallexample

@end itemize


@c ======================================================================
@node khoros, implementation, Top
@chapter KHOROS User Interface

@menu
* cantata::     Cantata
* example::     A programming example
* demo::        The khoros demo
@end menu

@node cantata, example, khoros, khoros
@section Cantata

Khoros is a programming environment, within which visual programming
is implemented in a program called @code{cantata}. This program allows
the user to visually place tasks on a drawing board, connect 
them with data-flow paths, fill in the parameter values, and execute
single tasks or complete data-flow diagrams. What happens at the lower
level is the GUI executes a Khoros executable with parameters set via
command line switches. The user can monitor this in the parent window
from which @code{cantata} was started up, as well as all normal 
output the program produces.@footnote{The KHOROS environment is available
via anonymous FTP from pprg.eece.unm.edu or may be ordered on tape from
the Khoros Group, Department of Electrical and Computer Engineering, 
University of New Mexico, Albuquerque, NM 87131.  Installation of
Khoros is detailed in Volume II (Khoros Programmer's Manual), Chapter 10
of the Khoros documentation, also available at the above locations.}

Given this principle, we can
 let Khoros @code{cantata} talk to our simple user interface.
The essential information needed by @code{cantata} to 
run 'foreign' programs, is a User Interface Specification (UIS) file,
also referred to as a @strong{pane} file (each basic program in Khoros
typically comes with a predefined @code{program_name.pane} file).

Since an @sc{aips++} task is now self-describing 
(all relevant information is in the executable, not in a file on disk)
and can supply the caller
with internal information about it's knowledge of keywords, and
defaults, it is relatively straightforward to automate this process and
have each program create a @code{pane} file from itself.
This is done by the executable itself through the @code{help=pane} parameter.

Utilizing the @code{xyPlot} program as an example,

@example
    xyPlot help=pane > xyPlot.pane
@end example

@noindent
where the @code{xyPlot.pane} will look like:

@smallexample
-F 4.2 1 0 170x7+10+20 +35+1 'CANTATA for KHOROS' cantata
 -M 1 0 100x40+10+20 +23+1 'An AIPS++ program' aips++
  -P 1 0 80x38+22+2 +0+0 'Plot y vs. x vectors from an AipsIO file' xyPlot
   -I 1 0 1 1 0 1 50x1+2+2 +0+0 '/tmp/xy.aipsio' 'xyfile' 'File which contains
    xy vectors' xyfile
   -s 1 0 1 1 0 50x1+2+4 +0+0 'False' 'overplot' 'Overplot or multiple plots?'
    overplot
   -s 1 0 1 1 0 50x1+2+6 +0+0 'True' 'lines' 'Plot lines or points?' lines
   -H 1 13x2+1+8 'Help' 'Help for xyPlot' aips.help
   -R 1 0 1 13x2+39+8 'Run' 'RunMe' xyPlot
  -E
 -E
-E
@end smallexample

@noindent
The indentation is purely done to visualize the hierarchy which can
be present in more complicated pane files.
Currently most parameters are string parameters
(the @samp{-s} line) except input 
(the @samp{-I} line) and output files 
(the @samp{-O} line), which need to be labeled as such in the creation
phase (@code{Input.Create()} in our case). 

A few comments and problems:

@itemize @bullet

@item
Array or composity parameters (C structures) can only be implemented 
as strings, since Khoros cannot handle those. 
Structures can be implemented via the mutually exclusive or inclusive 
tags that can be part of a UIS file. This can be implemented later.

@item
Though AIPS programs lend themselves to the dataflow based model, they
may not like their existing files to be overwritten.  By default,
datasets are assumed re-usable and implemented as temporary file,
sockets or shared memory (user and run-time selectable).
It is up to the user to select the mode, or
define his own name.  Selection your own name turned out to be a bit
laborious.  Selecting sockets or shared memory as data-model will cause
problems if datasets are implemented as directories (as is for example
in Miriad). 

@item
Programs that send their output to @code{stdout} or @code{stderr}, or for
that matter, reading from @code{stdin} will get stuck.  If one sticks to
the load-and-go principle, like AIPS programs normally are,
there is no problem with input.  Output is another story.  The 
@code{stdout} goes to the screen (whichever cantata was started up from), and
@code{stderr} will appear in the error window that the glyph will pop up. 

@item
The pane files should be organized in the KHOROS tree, 
@*
@file{$KHOROS_HOME/<toolbox>/repos/cantata/}. In addition, subform files
(pane files which define a hierarchy in tasks) need to be defined too.
This process is not easily automated.  The Khoros program @code{Preview}
may assist in building a more pleasent pane file.@footnote{See the
Khoros documentation, Volume II
(The Khoros Programmer's Manual), Chapters 2 and 3, for details.}

@item
The on-line documentation (referenced by the @samp{-H}
 line on a pane file) comes
in two options: single file and directory. If the name, referenced
on the -H help line, is a directory, within that directory there can
be several files which will be displayed.  Khoros/Cantata comes with a
program @code{formatdoc}, which converts an nroff-like document in the
format that this help system wants (more or less ascii).

@end itemize

@node demo,(dir) , example, khoros
@section The KHOROS demo

In this section we will walk you through some examples within 
@code{cantata}, the Khoros graphical user interface with visual
programming. It will read a lot more pleasant to be in
@code{cantata} when you read this. You either enter it the
way you want, or follow the demo route:

@example
    cd $AIPSHOME/code/aips/test
    ao demo
    ao demo.workspace.Z
    csh demo
@end example

This will start up @code{cantata}@footnote{You must have KHOROS 
installed at your site.}
, with the demo predefined for you. The
setup was saved in a file called @code{demo.workspace.Z}.

You can also manually load in new programs as follows:

@itemize @bullet
@item
pull down the @code{Workspace} menu, and 
select the @code{File Utilities} option. 

@item 
Fill in the name of the relevant pane file by using the builtin
file browser: click on the area of the window where the words 
@code{UIS Filename} appear.  A window will open with a list of
 filenames.  You may navigate through the directories of your machine
by typing them in the small field at the bottom of the window or by
 clicking the mouse cursor on the appropriate directory/pane filename.
The name will
appear in the original @code{File Utilities} box to the right. A
glyph will appear on the @code{cantata} workspace.
 Drop it with a left mouse click anywhere
you like, you may always move it later.

@end itemize

@iftex 
@tex
\vskip 0.25in
\epsfxsize=6.5truein
\epsfbox{workspace.eps}
\center {Cantata - the workspace pull down menu and window.}
@end tex
@end iftex

Some comments:


@c item
@itemize @bullet

@item
An individual application is represented by a glyph 
(the small white rectangle appearing on the cantata workspace.)  
Each glyph displays
a set of red (bomb), blue (form) and green (on/off) buttons.  They represent
a Quit, Edit and Run functionality.  Typically a user selects the
programs to run, opens a glyph by clicking on the middle/ blue (form)
button, and fills out the necessary parameters. Output appears in the
parent window, from which @code{cantata} was started.

@iftex 
@tex
\vskip 0.25in
\epsfxsize=6.5truein
\epsfbox{cantata.eps}
\center {Cantata - the manually loaded @code{xyPlot} glyph and window.}
@end tex
@end iftex

@item
Input file's parameters inside the pane (visible after you've clicked on
the blue button) come with a file browser to easy filename insertion. 

@item
Parameters can use the program default by unsetting the option button. 
It normally comes as a filled black square, meaning the entered value
will be the one used by the program. 

@item
Dataflow lines (the green lines) can be created by first clicking on an
@strong{out} (OutFile) arrow, followed by an @strong{in} (InFile) arrow.  An
OutFile can be split (i.e.  goto various InFile's), but of course one
cannot merge various OutFile's into one InFile.  Any previous
connections would then be broken. 

@item
Dataflow lines can be files (default), sockets or shared memory. 
Intermediate results are typically lost, after you exit from Khoros,
though can always be stored into a file at demand.  Click the mouse
while pointing at a dataflow line, and you'll see what they mean with
this. 

@item
With the RESET button (on the left of the drawing board) you can 
force the flow to
be run all the way through for the next RUN. Be sure all required
inputs and outputs are connected, otherwise the flow will be
interrupted. An inactive in/out can be recognized as a grey arrow,
as opposed to a black arrow, inside the yellow rectangles.

@item
Saving a workspace can be done within the 
WORKSPACE/File Utilities menu option. The default demo is in
@code{demo.workspace.Z}.

@item
A few Khoros specific tasks may also be of interest during the
first few months of the project. 

@c item-enum
@enumerate

@item
To view an existing FITS file:

@c item-enum-item
@itemize @bullet
@item
Pick up @code{Input Data File} from @code{INPUT SOURCES}, 
select @code{User Defined} and either fill in the name
of the FITS file in the box next to
@code{User Specified File} or use
the file browser by clicking on the
@code{User Specified File} area itself.
Then click on @code{glyph} to close it. Put the glyph anywhere on
the drawing board, it should have the @code{input} label now.

@item
Pick up @code{Standard File Format} from
@code{CONVERSIONS} and select @code{FITS to VIFF}
(the @code{viff} format is Khoros' native image format).
Again click on @code{glyph} to place it on the board,
preferably just right of the previous @code{input}
gly[h you dropped; it should have the @code{fits2viff} label now.

@item
Pick up @code{Display Image} from @code{OUTPUT} and select
@code{Interactive Display}. Click on @code{Glyph} to close 
it, and place it just to the right of the
@code{fits2viff} glyph. Check the label is @code{editimage}.

@item 
Connect appropriate output with the inputs, and run the flow.
@end itemize

@end enumerate


@end itemize


@c ======================================================================
@node conclusion
@chapter Conclusion

The ease of application programming offered by the @code{Input} and
@code{Param} classes well offsets their current limitations.  As the C++
environment matures, the author expects a replacement that will allow
much more variety on the command line.  The added beauty of
@code{Input}'s trivial @code{Khoros} GUI generation should not be seen
as justification for @code{Input}'s use beyond the development stage.
@code{Khoros} was developed with its own visualization applications in
mind.  This limits the graphical user interface to load&run execution.

The @sc{aips++} use of the @code{Khoros} environment is as simple or as
complex as the programmer wishes to make it.  Those programmer's wishing
to make their GUI's more functional (e.g. interdependent sub-windows)
are refered to the Khoros documentation, Volume II
(The Khoros Programmer's Manual), Chapters 2 and 3, for details.


@bye














\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename rtti.info
@settitle Run Time Type Identification
@c %**end of header

@ifinfo
This document discusses the run time type identification system. This system
was implemented using the TI @strong{C} preprocessor. It implements the
standard proposed by B. Stroustrup and D. Lenkov @footnote{Stroustrup, Lenkov,
"Run Time Type Identification for C++", The C++ Report, March-April, 1992, 
pp.32-42} @footnote{Stroustrup, Lenkov, "Run-Time Type Identification for C++
(Revised)", Usenix C++ Proceedings, Aug. 1992, pp. 313-339}. The implemented
system, however, provides ``hooks'' for much more extensive type information.
@end ifinfo

@titlepage
@title Run Time Type Identification in AIPS++
@subtitle DRAFT Version
@vskip 0pt plus 1fill
@author Darrell Schiebel
Last modified: $Date$
By: $Author$
@c The above line is maintained by RCS - do not modify it.
@end titlepage

@node Top, Overview, (dir), (dir)

@chapter Introduction

This document discusses the run time type identification system (RTTI). This 
system was implemented using the @sc{ti} C preprocessor. It 
implements the standard proposed by B. Stroustrup and D. Lenkov 
@footnote{Stroustrup, Lenkov, "Runtime Type Identification for C++", The C++ 
Report, March-April, 1992, pp.32-42} @footnote{Stroustrup, Lenkov, "Run-Time 
Type Identification for C++ (Revised)", Usenix C++ Proceedings, Aug. 1992, 
pp. 313-339}. However, the implemented system also provides ``hooks'' for much 
more extensive type information.

We will first discuss the ``sanctioned'' interface. This is the basic system
proposed by Stroustrup et. al. with minor syntactic changes to ease 
implementation. Stroustrup proposes the concept of a ``checked cast'', and
a type comparison operation. The last section will discuss the functionality
beyond what was proposed by Stroustrup.

@chapter Sanctioned Interface

This interface provides a mechanism which allows the user to @emph{safely} cast
a pointer. If the pointer is coercible to the indicated type then a valid
pointer is ``returned'' otherwise a @emph{NULL} pointer is ``returned''.
Stroustrup's proposed syntax @footnote{Usenix C++ Proceedings, Aug. 1992} is 
similar to the syntax used for any cast in @strong{C++}:
@example
class A @{virtual void dummy();@};
class B : public A @{@};
class C : public A @{@};

A *a = new B;
B *b = (? B *)a;
C *c = (? B *)a;
@end example
@noindent
With respect to Stroustrup's system, @code{b == a} and @code{c == 0}. The
virtual function @code{A::dummy()} is necessary because run time type 
information is only generated for classes if they have a virtual function 
table @footnote{In the general case, this is nontrivial to determine (expound
latter)}. This is necessary because the virtual table and the virtual 
mechanism provides the ingredients necessary for the construction of a 
run time type system:
@enumerate
@item
A place to store a function pointer as a hook for each object to return
its type information.
@item
A mechanism to access the object at the ``end'' of the inheritance chain.
@end enumerate
@noindent
So in this manner, one can perform a ``checked'' cast on a pointer, and
perform the necessary comparisons to downcast a pointer from a base object
to a pointer to the desired derived object.

The implementation for @sc{aips++} follows this standard closely. The only
difference is the syntax. The above example would look like:
@example
rtti class A @{virtual void dummy();@};
class B : public A @{@};
class C : public A @{@};

A *a = new B;
B *b = (checked (B *) a);
C *c = (checked (B *) a);
@end example
@noindent
The @code{rtti} qualifier was added to underscore the work that was going on 
behind the scenes. The run time type information will be added only if the
class is prefixed with @code{rtti} and if the class has a virtual function.
The @code{rtti} qualifier can simply be @code{#define}d to nothing if 
run time type information should become available as a language feature.
The ``?'' syntax would be difficult to support in our implementation mainly
because it is implemented using a preprocessor. The @sc{ti} preprocessor
operates by pulling out sections of the code between a starting delimiter, 
character string, and an ending character. Thus, the closing paren is 
necessary to allow the preprocessor to process both the casting type and the 
variable which needs to be cast. In any event, these checked casts can easily 
be converted to the ARM style with a simple @emph{sed} script.

If a @code{checked} cast is applied to an object pointer which does not have 
run time type information a compile time error will result. In the case of 
templates implemented with the @sc{ti} C preprocessor, the syntax for declaring
an object with run time type information is as follows:
@example
template<class t> class X<t> @{
  virtual void dummy();
  t *variable;@};

template<class t> class Y<t> : public A @{t *variable;@};

RTTI_DECLARE_ONCE X<int>;
DECLARE_ONCE Y<int>;
@end example
@noindent
In this case, (assuming that the @code{A} which @code{Y<t>} is inherited from
is the @code{A} in the above examples) both @code{X<int>} and @code{Y<int>}
would both have run time type information. @code{X<int>} would have it because
it is specified in the @code{RTTI_DECLARE_ONCE} statement, and @code{Y<int>} 
would have it because this information is inherited from @code{A}. This syntax
will change when templates become available as language features, i.e. the
keywords @code{DECLARE}, @code{DECLARE_ONCE}, @code{RTTI_DECLARE_ONCE}, etc.
will no longer exist.

In addition to a checked cast, Stroustrup's proposal provides for a method
of comparing two types to see if one type matches another either directly or
through possible casts. The format for this type of comparison is as follows
(were @code{A}, @code{B}, and @code{C} are from the above examples):
@example
A *b = new B;
A a;
A *c = new C;

typeid(b) == typeid(A)
typeid(a) == typeid(A)
typeid(c) == typeid(A)
typeid(b) == typeid(a)
typeid(c) == typeid(a)
typeid(c) == typeid(B)
@end example
@noindent
All of the comparisons would be true except for the last comparison. The
@sc{aips} RTTI system supports this syntax of @code{typeid()} applied to 
both variables and types which have run time type information.

@chapter Un-sanctioned Interface

The use of the interface described here is discouraged, because it may not
be available if an RTTI should become available as a language feature in C++.
A string representing the name of a type can be obtained by using the 
@code{typeid()} function which is a member of the @code{Typeid} objects. A 
reference to a @code{Typeid} object is returned by the @code{typeid()} global
function previously discussed. This type name can be obtained as follows:
@example
A *a = new B;
A *a2 = new A;
A *a3 = new A;
B *b = new B;

const char *a_type = typeid(a).typeid();
const char *a2_type = typeid(a2).typeid();
const char *a3_type = typeid(a3).typeid();
const char *b_type = typeid(b).typeid();
@end example
@noindent
In this example, @code{strcmp(a_type, b_type) == 0}, and 
@code{strcmp(a2_type, a3_type) == 0}, but @code{strcmp(a_type, a2_type) != 0}.
This is the case because the @code{typeid(a)} returns the most specific type 
available, i.e. the type of @code{B}.

The final useful member function of the object returned by @code{typeid()},
@code{Typeid}, is @code{const Typeid **typesig()}. This function returns an 
array of @code{Typeid} object pointers. The first element of the array is a 
pointer to the @code{Typeid} of the current object. The subsequent entries
are pointers to the @code{Typeid}s of each of this objects parents, if it has
any. The end of the array is denoted by a @code{NULL} entry. So for 
example, the following code will print out the inheritance tree:
@example
rtti class Base @{virtual void dummy();@};
class Derived1 : virtual public Base @{@};
class Derived2 : virtual public Base @{@};
class Derived3 : public Derived1, public Derived2 @{@};

void _printTree(const Typeid *type, int count) @{
  if (type) @{
    for (int j = 0; j < count; j++)
      cout << "\t";
    cout << (*type).typeid() << endl;
    for (int i = 1; ((*type).typesig())[i]; i++) @{
      for (int j = 0; j < count; j++)
        cout << "\t";
      _printTree(((*type).typesig())[i],count+1);
    @}
  @}
@}

void printTree(const Typeid &type) @{
  cout << type.typeid() << endl;
  for (int i = 1; (type.typesig())[i]; i++)
    _printTree((type.typesig())[i],1);
@}

void Base::dummy() @{@};
main() @{
  Derived3 d;

    printTree(typeid(d));
@}
@end example
@noindent
This piece of code will result in output resembling the following:
@example
Derived3
        Derived1
                        Base
        Derived2
                        Base
@end example

@bye




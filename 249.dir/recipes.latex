
% Body of note 249, \input by ../249.latex
% gmoellen (2002Jan30)

\section{Introduction}

The \htmladdnormallink{Glish}{../../glish/glish.html} Command-Line
Interface (CLI) in \aipspp\ is a very powerful and flexible
environment for data manipulation and analysis.  In addition to
providing a concise means of access to and operation of the standard
astronomy reduction tools in \aipspp\, an impressive array of generic
tools are available.  One of the greatest strengths of \aipspp\ is the
ability to combine standard astronomy reductions with ad hoc analyses
devised by individual users.

Owing to this exceptional flexibility, and a tendency among users to
document standard reduction sequences as glish scripts, a tremendous
wealth of user-designed Glish scripts exists all over the world.  As
glish scripts are the language of \aipspp\, it is therefore desirable
to collect useful recipes in one place where than can be used as
written, or as practical examples from which unique data analysis
tools can be easily developed by users.  This document describes the
revitalized \htmladdnormallink{\aipspp\ Recipes
Repository}{../../recipes/Recipes/index.html}, and how to contribute
to it.

More information about how to use
\htmladdnormallink{Glish}{../../glish/glish.html} itself can be found
in \aipspp\ Note 195, \htmladdnormallink{Getting Started in
Glish}{../195/195.html}, and the \htmladdnormallink{Glish User's
Manual}{../../reference/Glish/Glish.html}.  The \aipspp\
\htmladdnormallink{User Reference
Manual}{../../user/Refman/Refman.html} describes how to use all
\aipspp\ modules and tools in Glish, and is often referred to in
individual recipes.

\subsection{How to Contribute a Recipe}

It is now a fairly simple matter to contribute a recipe.  Just follow
the instructions described in the next few sections for formatting
your script file (a template {\tt .g} file is available here:
\htmladdnormallink{recipe.g}{../../../code/doc/notes/249.dir/recipe.g}).
Give it a short descriptive filename that ends in {\tt rec.g}, and
send it to aips2-recipes@nrao.edu.

\section{Basic Principles}

A useful recipe is not simply a random glish script.  The purpose of
the Recipes Repository is to supplement the conventional \aipspp\
documentation with concrete examples that will prove instructive for
novice glish script-writers.  To make the most of the \aipspp\ Recipes
Repository, some guiding principles are required:

\begin{itemize}

\item The best recipes are short and of limited scope.  A recipe
should provide a quick and useful function, or concisely illustrate a
clever glish mechanism or set of closely related operations.  Such
recipes will make it easy for a user to understand how to implement a
particular operation and leverage it to his/her own purposes.

\item Scripts intended for the Recipes Repository should generate
their own data, or make use of data in the Data Repository.  When
appropriate, datasets of reasonable size may be added to the Data
Repository.

\item Scripts submitted for the Recipes Repository must follow the
standard format (described in detail below).  The format is
self-contained, comment-rich, executable, and has been designed for
readability.

\item Markup of scripts for the Recipes Repository should be simple
and require a minimum of additional information.  This is necessary
for maintenance of the Recipes Repository web pages.  In most cases,
the additional information should be limited to links to relevant
documentation.

\item The recipes page should be organized hierarchically according
to different recipe categories.  For now, there are three categories:
General, Synthesis, and Single Dish.  Each of these categories may
be divided as necessary.  In short, it should be easy to find scripts
of different types, even as the Repository grows.

\end{itemize}


\section{The Recipe Script Format}

Scripts submitted for the Recipes Repository must follow a standard
format.  A template {\tt .g} file is available here:
\htmladdnormallink{recipe.g}{../../../code/doc/notes/249.dir/recipe.g}).
The format consists of four main sections, Titles, Script, Output, and
Credits.  These are described in turn:

\subsection{Titles}

The Titles section provides comment keywords for general information
about the script, its goals and its results.  It should be possible to
recognize a particular recipe as useful to one's own purposes from a
quick scan of this section.  The keywords in the Titles section are as
follows:

\begin{description}

\item{\tt \#RECIPE:} A descriptive title for the recipe (not the filename)

\item{\tt \#CATEGORY:} The category to which the recipe belongs (General, Synthesis,
or Single Dish)

\item{\tt \#GOALS:} The specific goals of the recipe, in one line

\item{\tt \#USING:} The \aipspp\ modules and/or tools used in the script

\item{\tt \#RESULTS:} A one-line description of the output of the script

\item{\tt \#ASSUME:} A one-line description of assumptions made by the script,
in particular, which external data files may be required

\item{\tt \#SYNOPSIS:} A paragraph describing the novelty of the script; this
is the only Titles keyword which may extend beyond a single line.  Each
line should be prepended by ``{\tt \#\ }''.

\item{\tt \#SCRIPTNAME:} The .g filename of the script (used for markup purposes)

\end{description}


\subsection{Script}

The Script section is where the script itself resides, and it begins
with the keyword ``{\tt \#SCRIPT:}'' on a line by itself.  The script
should written following these rules:

\begin{itemize}

\item A recipe script has two columns, each 40 characters wide.  The
left column consists of the executable commands, and the right column
consists of short descriptive comments (prepended by ``{\tt \#\ }'')
for each line.  If the executable commands extend beyond 40
characters, the comment should appear on the previous line, properly
indented.

\item All {\tt include} commands should appear at the top of the
script, and each should be specifically commented.

\item Use mnemonically useful names for \aipspp\ tools and other
variables.  For example, a fitter tool should be called ``{\tt
myfit}'' or similar.  Above all, avoid single-letter names for tools.

\item Terminate each glish command with ``{\tt ;}''.  This will aid in
debugging typos (e.g., unbalanced delimiters).

\item Double-space the glish commands unless neighboring lines are
very closely associated (e.g., a sequence of simple glish algebra,
a simple loop, etc.).

\item Comment every line of glish.  This rule may be relaxed when two
or three closely associated lines of rudimentary glish are fully
described by a single comment, or when a short loop is executing a
single operation repeatedly.  Every double-spaced line of glish should
have its own descriptive comment.

\item For glish commands containing tool function executions, the
parameters of the function should be listed with parameter names
included, one per line, left-justified according to the indentation of
the first parameter.  Standard glish functions (e.g. {\tt array()},
{\tt min()}, {\tt max()}, and others which do not require an {\tt
include}) need not have their parameter names included.  Parameters
used with default values may be omitted.  When a function parameter
consists of a function execution, that function's parameters should
follow the same rules.  In cases where this leads to poor readability
(do not nest functions in more than two layers), opt for storing
values returned by functions in glish variables, and use these
variables in subsequent function parameters.

\item In cases where additional annotation or explanation is required,
these may be added before or after the relevant line(s) of glish as
full-width (80 characters) comments, prepended by ``{\tt \#\ }''.  In the
interest of succinctness, such comment blocks should be kept to a
minimum, but they are often useful to express the finer points and
lore of a particular operation.

\end{itemize}

\subsection{Output}

The output section begins with ``{\tt \#OUTPUT:}'' (on its own line)
and contains sample output from the script.  This section is very
important since it enables a novice user to determine if the recipe
(or their adaptation of it) is running properly.  Rules for including
recipe output are as follows:

\begin{itemize}

\item Prepend all output lines with ``{\tt \#\ }'' so that the script
remains executable.

\item Only include output unique to the script.  It is not necessary,
for example, to include the messages generated by {\tt include}
commands.

\end{itemize}

\subsection{Credits}

The Credits section provides for any last words of advice for using
the script, and for attribution.  The following keywords are supported:

\begin{description}

\item{\tt \#CONCLUSION:} Like the synopsis, this section is useful for
describing details of the recipe, in this case, those appropriate
after a user has run the recipe.  All lines must be prepended with
``{\tt \#\ }''.

\item{\tt \#SUBMITTER:} The full name of the submitter should be supplied
here.

\item{\tt \#SUBMITAFFL:} The affiliation of the submitter should be supplied
here.

\item{\tt \#SUBMITDATE:} The date of submission should be supplied here,
formatted as yyyy-mmm-dd, e.g., 2002-Jan-29.

\end{description}

\subsection{The Recipe Script Format: An example}

An example of a properly formatted recipe script can be found here:
\htmladdnormallink{plotrec.g}{../../../code/contrib/recipes/plotrec.g}.


\section{The Recipe \LaTeX\ Markup}

This section describes the \LaTeX\ markup of recipes for the Recipes
Repository web-page.  Users submitting recipes for the Repository
need not concern themselves with this section since \aipspp\ project
staff will handle this part of the recipe submission if the contributed
script is properly formatted as described above.

The recipe script format described above is designed to make markup
for the Recipes Repository web-page very simple.  \LaTeX\ macros for
each of the recipe script format keywords are defined in
\htmladdnormallink{ahrecipe.tex}{../../../code/doc/texinputs.dir/ahrecipe.tex}.
Via these macros, the Titles and Credits sections of the script format
are duplicated in the \LaTeX\ markup, with commands for linking to the
script itself and to the relevant module or tool documentation the
only added information.  For simplicity's sake, the Script and Output
sections of the script format are included as {\tt verbatim} blocks.
In this way, the script looks like a script (and is readable if the
prescribed format is followed), and lines of the script may be copied
directly to the Glish CLI with mouse-driven cut-and-paste.

A template {\tt .latex} file is available here:
\htmladdnormallink{recipe.latex}{../../../code/doc/notes/249.dir/recipe.latex}).

\subsection{The Recipe \LaTeX\ Markup: An example}

An example of a proper recipe \LaTeX\ markup can be found here:
\htmladdnormallink{plotrec.latex}{../../../code/doc/recipes/General/plotrec.latex}.


\section{Recipes Repository Implementation}

The Recipes Repository consists of two parts.  First, the recipes
themselves are to be checked in as well-commented glish scripts (see
above for details of the required format) in {\tt
code/contrib/recipes}.  The build system copies the scripts to {\tt
libexec} so that they may be accessed directly.

The second part of the Repository is the documentation of
each recipe.  The directory structure for the documentation is
as follows:

\begin{tabular}{ll}
{\tt code/doc/recipes}               & root directory for Recipe docs \\
& \\
{\tt code/doc/recipes/Recipes.latex} & \LaTeX\ markup for main Recipes web-page \\
{\tt code/doc/recipes/makefile}      & makefile for {\tt Recipes.latex} \\
{\tt code/doc/recipes/index.html}    & forwarding html for main Recipes web-page \\
& \\
{\tt code/doc/recipes/General/}              & directory for General recipes markup \\
{\tt code/doc/recipes/General/General.latex} & \LaTeX\ markup for General category web-page \\
{\tt code/doc/recipes/General/makefile}      & makefile for General recipes \\
{\tt code/doc/recipes/General/index.html}    & forwarding html for General category web-page \\
& \\
{\tt code/doc/recipes/Synthesis/}                & directory for Synthesis recipes markup \\
{\tt code/doc/recipes/Synthesis/Synthesis.latex} & \LaTeX\ markup for Synthesis category web-page \\
{\tt code/doc/recipes/Synthesis/makefile}        & makefile for Synthesis recipes \\
{\tt code/doc/recipes/Synthesis/index.html}      & forwarding html for Synthesis category web-page \\
& \\
{\tt code/doc/recipes/SingleDish/}                 & directory for SingleDish recipes markup \\
{\tt code/doc/recipes/SingleDish/SingleDish.latex} & \LaTeX\ markup for SingleDish category web-page \\
{\tt code/doc/recipes/SingleDish/makefile}         & makefile for SingleDish recipes \\
{\tt code/doc/recipes/SingleDish/index.html}       & forwarding html for SingleDish category web-page \\
& \\
\end{tabular}

The \LaTeX\ markup file for each recipe (see above for details of the
required format) is to be deposited into the markup directory
appropriate to the recipe's category.  The \LaTeX\ markup file for the
category should be updated with the recipe name and title, and the
appropriate line added to the category's makefile.  The build system
will then process the recipe's \LaTeX\ markup file and generate {\tt
.ps.gz} and html files in the appropriate locations in the docs tree.





\documentstyle[10pt]{article}
\begin{document}

\newcommand{\aipspp}{{\sc aips++}}

\title{Note 190: Exceptions Changes for \aipspp}
\author{B.E. Glendenning \\ {\em bglenden@nrao.edu}}
\date{April 24, 1996}
\maketitle

\section{Exception mechanism}

The C++ exception mechanism provides three features:

\begin{enumerate}
	\item Transfer of {\em control} between the point in the program where
	the the exception is {\em thrown}, and where it is {\em caught}.
	\item Transfoer of {\em information} between the ``thrown'' and
	``caught'' locations. The information which is transferred can be
	arbitrary, since any object can be thrown. Note that a {\em copy} of
	the object is thrown.
	\item {\em Destruction} of automatic objects.
\end{enumerate}

The differences between the \aipspp\ exception emulation and the standard C++
mechanism are as follows:

\begin{enumerate}
	\item Only classes that follow certain rules\footnote{Basically, the
	classes must have the \aipspp\ version of RTTI.} may be thrown using the
	\aipspp\ emulation.
        \item Standard exceptions allow ``any'' exception to be caught with a
	single catch statement (using {\tt catch(...)}).
	\item Only classes derived from a special base class are destroyed by
	the \aipspp\ exception emulation.
	\item The syntax of the \aipspp\ emulation is somewhat different. For
	example, catch clauses must end with {\tt end\_try}. These differences
	can be hidden by a macro.
	\item \aipspp\ cannot rethrow exceptions.
	\item \aipspp\ does not support exception specifications.
	\item \aipspp\ exceptions contain the line number and source file of the
	location from which they were thrown.
\end{enumerate}

\section{When to throw an exception}

Exceptions are intended to be used in exceptional circumstances --- those that
the application programmer cannot reasonably be expected to test for --- not as
an alternative return mechansim. If nothing else, throwing an exception is
expensive: Meyers\footnote{{\em More Effective C++}, Addison-Wesley, 1996.}
notes that throwing an exception might be three orders or magnitude more
expensive than a normal function return.

As a rule of thumb then, a library routine should rarely have a {\em catch}
clause. Anticipated problems should be handled with normal programming
constructs (error returns and the like). The \aipspp\ library already follows
this rule.

Looging through the {\em aips} package, an exception is thrown\footnote{Either
directly, or through the use of an {\em Assert} statement in one form or
another.} in about 1800 places. Examining about half of these reveals
the following reasons that exceptions are thrown:

\begin{tabular}{ll}
Argument checking 			& 45\%  \\
Internal invariant/state verification	& 40\%  \\
Memory allocation			& 10\%  \\
I/O errors				& 2.5\% \\
Misc.					& 2.5\% \\
\end{tabular}

It seems to me that we are generally throwing exceptions appropriately.

The only errors that a running program might plausibly be able to handle (other
than via a graceful exit or a next iteration of a high level loop) are the
memory allocation and I/O errors.
	
\section{What exception to throw}

The draft standard C++ language and library has the following
exception hierarchy (indentation indicates inheritance):

\begin{verbatim}
bad_alloc
bad_cast
bad_exception
bad_typeid
exception
    logic_error
        domain_error
        invalid_argument
        length_error
        out_of_range
    runtime_error
        range_error
        overflow_error
\end{verbatim}

Basically, the first four are thrown by various language features (for example
if {\tt new} fails, {\tt bad\_alloc} is thrown), and standard library components
throw exceptions derived from {\tt exception}.

The {\sc aips++} library, by contrast has 42 exception classes. There are seven
classes alone to describe various bad things that can happen to {\em Array}
classes (conformence error, indexing error and the like).

This seems excessive, given that the running program cannot meaningfully deal
with most of the errors. All that is usually wanted from the exception is an
error message and information about where the exception was thrown.

There are three obvious approaches:
\begin{enumerate}
    \item Use the standard exceptions (implemented by us for compilers without
	  standard exceptions --- the classes are quite simple).
    \item Shadow the exception hierarchy with a similar {\tt aips\_*} hierarchy.
    \item Shadow the exception hierarchy, using multiple inheritance (so that
          the same catch could get both the {\tt aips\_*} and standard
	  exception). 
\end{enumerate}

I prefer the first solution. The only reason I can think of to adopt the latter
solutions is to embed line number and source file information. However one can
intercept exceptions with a debugger, so I don't consider this advantage
convenient enough to warrant the added complexity in the exception hierarchy.

We do need to allow for {\sc aips++} specific exceptions, so I would introduce
an {\tt aips\_exception} class derived from {\tt exception}, and perhaps an {\tt
aips\_io\_exception} derived from it. I don't think that yet more derived
classes should be forbidden, however their creation should be driven by the
programmer who could usefully {\em catch} such a class.

\section{The {\tt what()} string}

While it is true that debuggers on systems with native exceptions will
allow programmers to intercept exceptions, it is also true that
programmers will occasionally have to try to recreate a problem only
given an error message provided by the {\tt what()} member
function. To make it easy to figure out the originator of the
exception, I propose that exceptions that originate from {\tt throw()}
but not {\tt Assert*} should contain the name of the function to allow
the programmer to discover where the error originated.

A format of:
\begin{verbatim}
    "Class::member() - error message"
    "Class::member(args) - error message" // if overloading makes it ambiguous
    "::func() - error message"            // global function
    "::func(args) - error message"        // global overloaded function
\end{verbatim}
Should generally be chosen under normal circumstances.

After some reflection, I have decided not to suggest that the function
name be embedded in {\tt Assert} statements --- we want to continue to
make it easy for programmers to put in checks for ``impossible'' errors.

\section{Proposal}

I propose the following changes to the {\sc aips++} treatment of exceptions.
\begin{enumerate}
    \item That an exception hierarchy like the one I outlined be created.
    \item That existing exception classes gradually be removed during
	  maintenance.
    \item That the (potential) {\em catch}er of an exception determines when
	  a new exception class should be created.
    \item That a {\tt \#define} be created so that all exceptions may
	  be caught both with our exception emulation and ``real'' exceptions.
    \item That error strings in exceptions directly from a {\tt throw}
	  have a standard format that contains the throwing function's name.
\end{enumerate}

\end{document}
